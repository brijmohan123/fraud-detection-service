<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="PromptLibrary">
    <option name="promptLibrary" value="{&quot;promptLibraryList&quot;:[{&quot;promptName&quot;:&quot;snowpark_test_data_generation&quot;,&quot;commandName&quot;:&quot;generate_code_for_test_data_generation_snowpark&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Test Engineer to generate random artifical data using Python's Faker library, save it in JSON format to a Snowflake Table with a VARIANT data type column using snowflake snowpark.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;pivot_table_sql_query&quot;,&quot;commandName&quot;:&quot;generate_pivot_sql_query_in_snowflake&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to pivot a Snowflake table, transforming rows into columns for analysis, with unique column values becoming new columns and rows showing aggregated values.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;column_1&quot;,&quot;paramName&quot;:&quot;pivot_column&quot;,&quot;paramShortDesc&quot;:&quot;The column in the table whose unique values will become new columns in the pivoted output, allowing the transformation of rows into columns based on these values.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_ingestion_copy_into\t&quot;,&quot;commandName&quot;:&quot;generate_code_for_snowflake_data_ingestion\t&quot;,&quot;shortDescription&quot;:&quot;This prompt is useful for generating code that ingest data present in an external cloud storage location into snowflake. Prompt will help create storage integration and use COPY INTO command to load the data into a snowflake table. &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Azure, AWS&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;any cloud provider&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;USAGE, SELECT, MODIFY&quot;,&quot;paramName&quot;:&quot;snowflake_privilege&quot;,&quot;paramShortDesc&quot;:&quot;This refers to the specific privileges you need to grant&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;ingest_read_data_into_databricks&quot;,&quot;commandName&quot;:&quot;ingest_read_data_into_databricks&quot;,&quot;shortDescription&quot;:&quot;Data ingestion process in databricks from landing zone to staging&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;AWS, AZURE ,GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;The cloud service provider where to transfer the files&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python, Pyspark, Scala&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;secure_connection_databricks_to_cloud_storage&quot;,&quot;commandName&quot;:&quot;secure_connection_databricks_to_cloud_storage&quot;,&quot;shortDescription&quot;:&quot;Establish a secure Azure Databricks connection to AWS S3 for ingesting CSV data into a Spark DataFrame, enabling further transformation or storage in Delta Tables.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Azure,AWS&quot;,&quot;paramName&quot;:&quot;cloudprovider_1&quot;,&quot;paramShortDesc&quot;:&quot;Cloud where Databricks is hosted&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;AWS S3, Azure Blob, Storage bucket&quot;,&quot;paramName&quot;:&quot;cloudprovider_2&quot;,&quot;paramShortDesc&quot;:&quot;Cloud Storage&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Language&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_dynamic_data_masking_setup&quot;,&quot;commandName&quot;:&quot;setup_dynamic_data_masking_in_snowflake&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Database Administrator through the steps required to set up dynamic data masking in Snowflake. The process includes creating a masking policy based on the user's role and applying this policy to a specific column in a table.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;SHA2, REPLACE, REVERSE&quot;,&quot;paramName&quot;:&quot;masking_function&quot;,&quot;paramShortDesc&quot;:&quot;A function that obscures or redacts sensitive data, such as replacing characters with symbols or generating hashed values, to prevent unauthorised access.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;generate_data_preprocessing_code&quot;,&quot;commandName&quot;:&quot;generate_data_preprocessing_code&quot;,&quot;shortDescription&quot;:&quot;This prompt is useful for generating code that handles common data preprocessing tasks such as missing value imputation, feature scaling, and encoding categorical variables&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;missing_value_strategy&quot;,&quot;paramName&quot;:&quot;missing_value_strategy&quot;,&quot;paramShortDesc&quot;:&quot;missing_value_strategy&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;scaling_method&quot;,&quot;paramName&quot;:&quot;scaling_method&quot;,&quot;paramShortDesc&quot;:&quot;scaling_method&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;encoding_method&quot;,&quot;paramName&quot;:&quot;encoding_method&quot;,&quot;paramShortDesc&quot;:&quot;encoding_method&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_integration_databricks_send_json_to_aws_kinesis&quot;,&quot;commandName&quot;:&quot;generate_json_in_databricks_from_query_send_to_aws_kinesis_queue&quot;,&quot;shortDescription&quot;:&quot;This data process will generate code for Databricks to run a SQL query and construct a JSON message that can be sent to a cloud provider Kinesis queue.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, Scala, Java&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be written&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;select * from sage.bronze.customers&quot;,&quot;paramName&quot;:&quot;query&quot;,&quot;paramShortDesc&quot;:&quot;User Query&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Customer&quot;,&quot;paramName&quot;:&quot;parent_attribute&quot;,&quot;paramShortDesc&quot;:&quot;User header attribute&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;\&quot;posted_dtm\&quot;:  current date time the message is generated\n\&quot;source_system\&quot;:  hard code this value as 'sage'&quot;,&quot;paramName&quot;:&quot;additional_attributes&quot;,&quot;paramShortDesc&quot;:&quot;Any Additional attributes&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_ingestion_snowpipe&quot;,&quot;commandName&quot;:&quot;generate_code_for_snowflake_multicloud_snowpipe_ingestion&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to ingest data from cloud storage (AWS S3, ADLS, GCS) to Snowflake staging using Snowpipe, covering setup of cloud queues, Snowflake notifications, Snowpipe creation, and troubleshooting queries.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Azure, AWS, GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;Any Cloud Provider&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;S3, ADLS, Storage bucket&quot;,&quot;paramName&quot;:&quot;storage_container&quot;,&quot;paramShortDesc&quot;:&quot;Cloud Storage Container&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_ingestion_sourcing_to_cloud&quot;,&quot;commandName&quot;:&quot;data_ingestion_sourcing_to_cloud&quot;,&quot;shortDescription&quot;:&quot;Data Ingestion/Sourcing from external source (e.g. local machine filesystem) to cloud landing-zone&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;AWS,AZURE,GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;The cloud service provider where to transfer the files&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python/Scala/Java/.net&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_zero_copy_clone_schema_management&quot;,&quot;commandName&quot;:&quot;snowflake_zero_copy_clone_schema_management&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Snowflake Administrator through managing schema changes and maintaining historical versions of data in Snowflake Schemas using zero copy cloning&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;automate_deployment_of_database_using_github_actions&quot;,&quot;commandName&quot;:&quot;automate_deployment_of_database_using_github_actions&quot;,&quot;shortDescription&quot;:&quot;Automate deployment of database ddl/dml operations using github actions&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;GBQ, MySQL,Redshift&quot;,&quot;paramName&quot;:&quot;data_base&quot;,&quot;paramShortDesc&quot;:&quot;The database  type in which the data is updated&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;CREATE/ALTER/DROP/TRUNCATE/RENAME, SELECT/UPDATE/DELETE/INSERT&quot;,&quot;paramName&quot;:&quot;ddl_dml_action&quot;,&quot;paramShortDesc&quot;:&quot;The action performed on the database&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_architecture_flow_diagram_prompt&quot;,&quot;commandName&quot;:&quot;data_architecture_flow_diagram_prompt&quot;,&quot;shortDescription&quot;:&quot;Data Architecture flow digram creation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;ADLS Gen 2, AWS S3&quot;,&quot;paramName&quot;:&quot;Cloud_Storage&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;&quot;,&quot;paramName&quot;:&quot;external_source&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;mermaid graph&quot;,&quot;paramName&quot;:&quot;diagram_type&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_movement_copy&quot;,&quot;commandName&quot;:&quot;data_movement_copy&quot;,&quot;shortDescription&quot;:&quot;Data movement from Landing Zone to Bronze&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;AWS, Azure&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;JSON, CSV&quot;,&quot;paramName&quot;:&quot;data_format&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python, Pyspark&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_ingestion_from_cloud_streaming_service_using_pyspark_streaming_in_databricks&quot;,&quot;commandName&quot;:&quot;ingest_cloud_streaming_data_into_cloud_databricks_delta_table_with_spark_structured_streaming&quot;,&quot;shortDescription&quot;:&quot;Create a Data Process that ingests data from AWS Kinesis into Azure Databricks Stream into a Delta Table in Databricks using Spark Structured Streaming.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python &amp; PySpark&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;AWS Kinesis , Google Cloud Dataflow, Azure Stream Analytics&quot;,&quot;paramName&quot;:&quot;cloud_streaming_service&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Azure, AWS&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_real_time_processing_from_kafka_to_azure_databricks&quot;,&quot;commandName&quot;:&quot;ingest_kafka_data_into_azure_databricks_delta_table_with_spark_structured_streaming&quot;,&quot;shortDescription&quot;:&quot;Implement real-time data processing from Kafka to Databricks using Spark Structured Streaming for efficient data transformation and storage.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, PySpark&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;ingest_read_data_with_quality_checks_into_databricks&quot;,&quot;commandName&quot;:&quot;ingest_read_data_with_quality_checks_into_databricks&quot;,&quot;shortDescription&quot;:&quot;Data Reading/Ingestion from Cloud Landing Zone Data Bucket \&quot;landing-zone\&quot;, perform schema and null detection data quality check, and load good data to a delta table in Databricks&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;AWS/AZURE/GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;The cloud service provider where to transfer the files&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;PySpark/Python/Scala&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_aggregation&quot;,&quot;commandName&quot;:&quot;data_aggregation&quot;,&quot;shortDescription&quot;:&quot;Data Aggregation on source data&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;AWS,AZURE,GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;The cloud service provider where the files stored&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Delta table&quot;,&quot;paramName&quot;:&quot;input_data_format&quot;,&quot;paramShortDesc&quot;:&quot;Input data type of the files&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Parquet&quot;,&quot;paramName&quot;:&quot;output_data_format&quot;,&quot;paramShortDesc&quot;:&quot;Desired output data format&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python,Scala,Java&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_cleansing_deduplication&quot;,&quot;commandName&quot;:&quot;data_cleansing_deduplication&quot;,&quot;shortDescription&quot;:&quot;Apply  minimal or just-enough quality checks/rules, deduplications to keep enriched, conformed and curated data into Raw/Silver layer.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;AWS, ADLS&quot;,&quot;paramName&quot;:&quot;Cloud_Storage&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;JSON or CSV&quot;,&quot;paramName&quot;:&quot;Data_Format&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python or PySpark&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;implement_rbac_in_snowflake&quot;,&quot;commandName&quot;:&quot;implement_rbac_in_snowflake&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to implement role-based access control (RBAC) in Snowflake, providing detailed instructions, examples, best practices, and SQL commands to ensure secure, authorized data access.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;data_schema_generation_data_platform_table_from_file&quot;,&quot;commandName&quot;:&quot;data_schema_generation_data_platform_table_from_file&quot;,&quot;shortDescription&quot;:&quot;Generate table schema for a table into a data platform from a file&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;BigQuery, Snowflake&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;SQL DDL, JSON Schema&quot;,&quot;paramName&quot;:&quot;schema_format&quot;,&quot;paramShortDesc&quot;:&quot;The format or structure used to define the schema of a table or dataset&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;integrate_snowflake_with_git_for_version_control&quot;,&quot;commandName&quot;:&quot;integrate_snowflake_with_git_for_version_control&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to integrate Snowflake with GitHub for version control of setup tasks, including user and warehouse creation, via step-by-step instructions for secret creation and GitHub API integration.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;data_transformation_via_materialized_view&quot;,&quot;commandName&quot;:&quot;data_transformation_via_materialized_view&quot;,&quot;shortDescription&quot;:&quot;Generate SQL statements to create materialized views using a data platform based on provided query definitions and desired performance optimization&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;BigQuery, Snowflake&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_cleansing_transformation_stored_procedure&quot;,&quot;commandName&quot;:&quot;create_stored_procedure_for_data_cleansing&quot;,&quot;shortDescription&quot;:&quot;Generate a stored procedure for data cleaning and transformation.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;BigQuery, Snowflake&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Remove leading and trailing whitespace from the email column&quot;,&quot;paramName&quot;:&quot;list_of_transformations&quot;,&quot;paramShortDesc&quot;:&quot;A set of data cleansing and transformation operations to apply&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_replication_and_synchronisation&quot;,&quot;commandName&quot;:&quot;data_replication_and_synchronisation&quot;,&quot;shortDescription&quot;:&quot;Implement data replication and synchronisation between on-premise and other cloud data sources, such as on-premises databases or external cloud platforms&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;MySQL/SQL/PostgresSQL&quot;,&quot;paramName&quot;:&quot;database_type&quot;,&quot;paramShortDesc&quot;:&quot;On-premise data base type&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;AZURE/AWS/GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;Cloud Provider such as AWS,GCP,AZURE&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python/Scala/Java&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generate&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;storedprocedure_to_prepare_fact_table&quot;,&quot;commandName&quot;:&quot;create_storedprocedure_to_create_fact_table&quot;,&quot;shortDescription&quot;:&quot;Generate a stored procedure to prepare a fact table by joining and aggregating data from different tables.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;prepare_sales_fact_table, generate_report_data, update_customer_summary&quot;,&quot;paramName&quot;:&quot;procedure_name&quot;,&quot;paramShortDesc&quot;:&quot;This is the name you want to give to the stored procedure in BigQuery. A stored procedure is a reusable set of SQL commands that can be executed multiple times to achieve things such as fact table preparation.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;sales_fact, customer_orders_fact, website_traffic_fact&quot;,&quot;paramName&quot;:&quot;fact_table&quot;,&quot;paramShortDesc&quot;:&quot;A table consisting of the measurements, metrics or facts of a business process&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;['customers', 'orders', 'products']\n['employees', 'salaries', 'departments']\n['transactions', 'payment_methods', 'shipping_details']&quot;,&quot;paramName&quot;:&quot;list_of_tables&quot;,&quot;paramShortDesc&quot;:&quot;a series of fact tables to be linked to one another within a stored procedure. These contain data that are relevant to the fact table you are creating&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customers.customer_id = orders.customer_id\n\ninventory.item_quantity = transactions.order_id\n\nemployees.department_id = departments.department_id&quot;,&quot;paramName&quot;:&quot;join_conditions&quot;,&quot;paramShortDesc&quot;:&quot;Rules that specify how the rows in one table will align or be matched with the rows in another&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;SUM(orders.total_amount) AS total_revenue,\nCOUNT(customers.customer_id) AS customer_count,\nAVG(products.unit_price) AS average_price&quot;,&quot;paramName&quot;:&quot;aggregate_columns_and_calculations&quot;,&quot;paramShortDesc&quot;:&quot;Columns where aggregate functions (like SUM, AVG, COUNT, etc.) will be applied. Aggregate calculations summarise the data across multiple rows.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_platform_row_access_policy&quot;,&quot;commandName&quot;:&quot;setup_row_access_policy_using_data_platform&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineer through the process of setting up a row access policy using a data platform.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Snowflake, BigQuery&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_quality_stored_procedure&quot;,&quot;commandName&quot;:&quot;data_quality_stored_procedure&quot;,&quot;shortDescription&quot;:&quot;Test data quality based on rules in metadata table using stored procedure&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;snowflake&quot;,&quot;paramName&quot;:&quot;coding_tool&quot;,&quot;paramShortDesc&quot;:&quot;tool to be used for the stored procedure creation&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;load_data_in_tables_stored_procedure&quot;,&quot;commandName&quot;:&quot;load_data_in_tables_stored_procedure&quot;,&quot;shortDescription&quot;:&quot;Load data in tables based on configuration in metadata table by using stored procedure&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;snowflake&quot;,&quot;paramName&quot;:&quot;coding_tool&quot;,&quot;paramShortDesc&quot;:&quot;tool to be used to write the stored procedures&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;load_file_from_gcp_storage_bucket_into_bigquery_table&quot;,&quot;commandName&quot;:&quot;load_file_from_gcp_storage_bucket_into_bigquery_table&quot;,&quot;shortDescription&quot;:&quot;Generate code to ingest data from Google Cloud Storage into BigQuery table.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;CSV, JSON&quot;,&quot;paramName&quot;:&quot;source_file_format&quot;,&quot;paramShortDesc&quot;:&quot;The format the source file being loaded into  the BigQuery table should store data in&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_quality_check_on_data_platform_table_logging_monitoring_alerting&quot;,&quot;commandName&quot;:&quot;data_quality_check_on_data_platform_table_logging_monitoring_alerting&quot;,&quot;shortDescription&quot;:&quot;Generate code for a data platform to perform several data quality checks on a table within a dataset and it includes logging, monitoring and alerting&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;BigQuery, Snowflake&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;create_view_stored_procedure&quot;,&quot;commandName&quot;:&quot;create_view_stored_procedure&quot;,&quot;shortDescription&quot;:&quot;Create view based on column definition in metadata table by using stored procedure&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Microsoft tsql&quot;,&quot;paramName&quot;:&quot;coding_tool&quot;,&quot;paramShortDesc&quot;:&quot;tool to be used to write stored procedure&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_standardisation&quot;,&quot;commandName&quot;:&quot;data_standardisation&quot;,&quot;shortDescription&quot;:&quot;Data Standadization on source data and write to target&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, PySpark&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;dbt_snowflake_fact_table_creation&quot;,&quot;commandName&quot;:&quot;snowflake_fact_table_creation_using_dbt&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Data Engineer through the process of creating a fact table in Snowflake using DBT by joining two or more source tables and generating aggregate columns.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Products, Inventory, Customers, Users, Orders, Products&quot;,&quot;paramName&quot;:&quot;source_table1&quot;,&quot;paramShortDesc&quot;:&quot;These are individual records organised in rows. Each record is comprised of a series of  columns (also called fields).&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;[product_id, product_name product_price]\n[customer_id, customer_name, customer_age]\n[order_id, customer_id, order_date ]&quot;,&quot;paramName&quot;:&quot;source_table1_columns&quot;,&quot;paramShortDesc&quot;:&quot;A list of vertical data storage methods used within a fact table to group related data&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Products, Inventory, Customers, Users, Orders, Products&quot;,&quot;paramName&quot;:&quot;source_table2&quot;,&quot;paramShortDesc&quot;:&quot;A second source table which can be joined to the first over mutual or similar information&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;[product_id, product_name product_price]\n[customer_id, customer_name, customer_age]\n[order_id, customer_id, order_date ]&quot;,&quot;paramName&quot;:&quot;source_table2_columns&quot;,&quot;paramShortDesc&quot;:&quot;A list of vertical data storage methods used within a fact table to group related data&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Sales_fact, Inventory_fact, Finance_fact, Web_traffic_fact&quot;,&quot;paramName&quot;:&quot;fact_table_name&quot;,&quot;paramShortDesc&quot;:&quot;A structured table that can be used to specify properties and column definitions&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;TotalSales, AverageScore, CountOrders, MaxTemperature, MinStockLevel, SumDonations&quot;,&quot;paramName&quot;:&quot;aggregation_column1&quot;,&quot;paramShortDesc&quot;:&quot;Columns, whereby the data within is condensed into smaller, more concise results&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;TotalSales, AverageScore, CountOrders, MaxTemperature, MinStockLevel, SumDonations&quot;,&quot;paramName&quot;:&quot;aggregation_column2&quot;,&quot;paramShortDesc&quot;:&quot;Columns, whereby the data within is condensed into smaller, more concise results&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;UserID, DimensionID, DateKey, LocationID StoreID&quot;,&quot;paramName&quot;:&quot;join_column&quot;,&quot;paramShortDesc&quot;:&quot;A column which is used when two source tables share mutual or similar information and are then joined together based on the contents of this column&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, IsActive, Version&quot;,&quot;paramName&quot;:&quot;additional_columns&quot;,&quot;paramShortDesc&quot;:&quot;Any additional columns needed to provide further data to the fact table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;TotalSales, AverageScore, CountOrders, MaxTemperature, MinStockLevel, SumDonations&quot;,&quot;paramName&quot;:&quot;aggregation_column3&quot;,&quot;paramShortDesc&quot;:&quot;Columns, whereby the data within is condensed into smaller, more concise results&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;TotalSales, AverageScore, CountOrders, MaxTemperature, MinStockLevel, SumDonations&quot;,&quot;paramName&quot;:&quot;aggregation_column4&quot;,&quot;paramShortDesc&quot;:&quot;Columns, whereby the data within is condensed into smaller, more concise results&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;create_dag_in_cloudcomposer&quot;,&quot;commandName&quot;:&quot;create_dag_in_cloudcomposer&quot;,&quot;shortDescription&quot;:&quot;This prompt creates a Directed Acyclic Graph (DAG) in Google Cloud Composer to define and execute a data pipeline using DataflowOperator for task management and dependency setup.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Extract Transform Load (ETL), Data validation, Machine learning, Data warehouse maintenance, Log aggregation, Real time data, Data migration&quot;,&quot;paramName&quot;:&quot;data_subject_area&quot;,&quot;paramShortDesc&quot;:&quot;The subject matter or specialisation the DAG graph will produce data on&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;unload_data_ for_migration_stored_procedure&quot;,&quot;commandName&quot;:&quot;unload_data_ for_migration_stored_procedure&quot;,&quot;shortDescription&quot;:&quot;Unload data from database based on input parameters&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Microsoft TSQL &quot;,&quot;paramName&quot;:&quot;coding_tool&quot;,&quot;paramShortDesc&quot;:&quot;tool to be used for stored procedure script&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Snowflake&quot;,&quot;paramName&quot;:&quot;target_db&quot;,&quot;paramShortDesc&quot;:&quot;target database&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_data_ingestion_task_dag&quot;,&quot;commandName&quot;:&quot;snowflake_data_ingestion_task_dag&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to load files from Cloud Storage into Snowflake using a Directed Acyclic Graph(DAG), with error handling and logging to a reject_records table.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Amazon S3, Google Cloud Storage, Microsoft Azure Blob Storage&quot;,&quot;paramName&quot;:&quot;cloud_storage&quot;,&quot;paramShortDesc&quot;:&quot;The third party cloud storage platform containing the file before loading it into Snowflake&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_push_to_sqs&quot;,&quot;commandName&quot;:&quot;databricks_push_to_sqs&quot;,&quot;shortDescription&quot;:&quot;Data unloaded by Databricks and constructed as a JSON message to be sent to Amazon SQS.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, Java ...&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Programming language of the code to generate&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;silver_to_gold_curation_and_dashboard&quot;,&quot;commandName&quot;:&quot;curate_silver_to_gold_with_dashboard&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to curate data from a Snowflake Silver table to a Gold table and create a dashboard showing top 10 Product Categories by profit.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;silver&quot;,&quot;paramName&quot;:&quot;silver_table&quot;,&quot;paramShortDesc&quot;:&quot;Name of the Silver Table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;gold&quot;,&quot;paramName&quot;:&quot;gold_table&quot;,&quot;paramShortDesc&quot;:&quot;Name of the Gold Table&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_push_to_servicebus&quot;,&quot;commandName&quot;:&quot;databricks_push_to_servicebus&quot;,&quot;shortDescription&quot;:&quot;Data unloaded by Databricks and constructed as a JSON message to be sent to Azure Service Bus&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Azure Service bus&quot;,&quot;paramName&quot;:&quot;cloud_messaging_service&quot;,&quot;paramShortDesc&quot;:&quot;Cloud Messaging Service&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python, Java, C# ...&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Programming language to write the code in.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_cleansing_transormation_databricks_table_pyspark_by_partition&quot;,&quot;commandName&quot;:&quot;data_cleansing_transormation_databricks_table_pyspark_by_partition&quot;,&quot;shortDescription&quot;:&quot;Data cleansing/basic transformations and curation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;PROCESSING_DATE&quot;,&quot;paramName&quot;:&quot;partition_column&quot;,&quot;paramShortDesc&quot;:&quot;column name to be used for partition&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer_purchases.csv&quot;,&quot;paramName&quot;:&quot;file_name&quot;,&quot;paramShortDesc&quot;:&quot;Input file name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Order_Date: The date the product was ordered.\nAging: The time from the day the product is ordered to the day it is delivered.\nCustomer_id: Unique id created for each customer.\nGender: Gender of customer.\nProduct_Category: Product category\nProduct: Product\nSales: Total sales amount\nQuantity: Unit amount of product\nPROCESSING_DATE: Processing date in YYYY-MM-DD format&quot;,&quot;paramName&quot;:&quot;file_schema&quot;,&quot;paramShortDesc&quot;:&quot;Input file schema&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowpark_pytest_testing&quot;,&quot;commandName&quot;:&quot;create_pytest_for_snowpark_code&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Test Engineer through the process of analyzing a snowpark code snippet and using the pytest library to create both  positive and negative test cases.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Function to Create Snowflake Session: create_session_function()\nFunction to Read and validate the CSV file into a Snowpark DataFrame: read_validate_function(session, file_path, numeric_columns)\nFunction to Load Data from Dataframe to Snowflake: load_to_table_function()\nMain Function: main_function()&quot;,&quot;paramName&quot;:&quot;sample_snowpark_code&quot;,&quot;paramShortDesc&quot;:&quot;snowpark code&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;customer_segmentation_for_marketing&quot;,&quot;commandName&quot;:&quot;customer_segmentation_for_marketing&quot;,&quot;shortDescription&quot;:&quot;Based on the Customer specific data points available, getting recommendation for customer segmentation for Marketing. \n\n&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;5&quot;,&quot;paramName&quot;:&quot;number_of_segments&quot;,&quot;paramShortDesc&quot;:&quot;number of customer segments&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;full name, gender, city&quot;,&quot;paramName&quot;:&quot;attributes_list&quot;,&quot;paramShortDesc&quot;:&quot;List of customer attributes to base segments on&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;optimization_tool_test_scenarios_generation&quot;,&quot;commandName&quot;:&quot;optimization_tool_test_scenarios_generation&quot;,&quot;shortDescription&quot;:&quot;Generating VS code for the A/B test Scenarios or Hypothesis identified for Adobe Target Implementation.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;adobe target implementation&quot;,&quot;paramName&quot;:&quot;optimization_tool&quot;,&quot;paramShortDesc&quot;:&quot;optimization tool&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;homepage banner&quot;,&quot;paramName&quot;:&quot;component&quot;,&quot;paramShortDesc&quot;:&quot;UI component&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;vehicle&quot;,&quot;paramName&quot;:&quot;last_product_viewed&quot;,&quot;paramShortDesc&quot;:&quot;last product viewed&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aws_kinesis_to_snowflake_pipeline_setup&quot;,&quot;commandName&quot;:&quot;setup_kinesis_to_snowflake_pipeline_with_firehose&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to set up a pipeline for continuous data ingestion from AWS Kinesis to Snowflake via Firehose, with step-by-step code, best practices, and optimizations.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;my_kinesis_stream&quot;,&quot;paramName&quot;:&quot;kinesis_stream_name&quot;,&quot;paramShortDesc&quot;:&quot;AWS Kinesis stream name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;my_firehose_delivery_stream&quot;,&quot;paramName&quot;:&quot;firehose_delivery_stream&quot;,&quot;paramShortDesc&quot;:&quot;Firehose Delivery Stream name&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_push_to_cloud_queue&quot;,&quot;commandName&quot;:&quot;databricks_push_to_cloud_queue&quot;,&quot;shortDescription&quot;:&quot;Data unloaded by Databricks and constructed as a JSON message to be sent to a cloud based queue.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;SQS, Azure Service bus ...etc&quot;,&quot;paramName&quot;:&quot;cloud_messaging_system&quot;,&quot;paramShortDesc&quot;:&quot;Specific cloud messaging system&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Java, Python, C# ...etc.&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Programming Language&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;azure_function_for_adls_to_snowflake_ingestion&quot;,&quot;commandName&quot;:&quot;azure_function_for_adls_to_snowflake_ingestion&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineers to design a modular Azure Function for ingesting data from ADLS to Snowflake, focusing on reusability and providing detailed cross-platform code solutions.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Implementation language&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_batch_data_ingestion_multi_threading_design&quot;,&quot;commandName&quot;:&quot;design_batch_ingestion_snowflake_multi_threading&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a consultants to design a multi-threaded batch data ingestion solution from AWS S3 to Snowflake using Python, with full flow, configuration, and detailed code steps.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;S3&quot;,&quot;paramName&quot;:&quot;cloud_storage&quot;,&quot;paramShortDesc&quot;:&quot;Cloud Storage&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Implementation language&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_transformation_load_table_from_join_tables&quot;,&quot;commandName&quot;:&quot;data_transformation_load_table_from_join_tables&quot;,&quot;shortDescription&quot;:&quot;Prepare a fact table by joining two or more tables and creating  aggregate columns using Pyspark&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;order_id: IntegerType\norder_date: StringType\nshipping_address: StringType\norder_status: StringType\nquantity: IntegerType\nproduct_id: IntegerType&quot;,&quot;paramName&quot;:&quot;table_1_schema&quot;,&quot;paramShortDesc&quot;:&quot;table_1 schema, column names and data type&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;column_name: dataType&quot;,&quot;paramName&quot;:&quot;table_2_schema&quot;,&quot;paramShortDesc&quot;:&quot;table_2 schema, column names and data type&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;product_id&quot;,&quot;paramName&quot;:&quot;join_column&quot;,&quot;paramShortDesc&quot;:&quot;name of column to join the tables at&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;column_name:dataType&quot;,&quot;paramName&quot;:&quot;fact_table_schema&quot;,&quot;paramShortDesc&quot;:&quot;fact_table schema, column names and data types&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_pivot_table&quot;,&quot;commandName&quot;:&quot;databricks_pivot_table&quot;,&quot;shortDescription&quot;:&quot;Pivoting tables for quick insight regarding metrics&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Sales_Date: StringType\nRegion: StringType\nProduct: StringType\nSales_Amount: FloatType\nQuantity_Sold: IntegerType&quot;,&quot;paramName&quot;:&quot;source_table_schema&quot;,&quot;paramShortDesc&quot;:&quot;Source Table schema&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Total Sales Amount, Quantity Sold by Region and Product&quot;,&quot;paramName&quot;:&quot;pivot_table_by&quot;,&quot;paramShortDesc&quot;:&quot;Total Sales Amount, Quantity Sold by Region and Product&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;create_business_intelligence_solution_using_bigquery&quot;,&quot;commandName&quot;:&quot;create_interactive_dashboard_using_bigquery_and_datastudio&quot;,&quot;shortDescription&quot;:&quot;Create Interactive dashboard using BigQuery and a data visualisation tool&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;snowflake_warehouse_usage_monitoring_view&quot;,&quot;commandName&quot;:&quot;snowflake_warehouse_usage_monitoring_view&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Snowflake admins to create a SQL view listing detailed warehouse info from the Account Usage Schema, including query details, performance, and resource metrics.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;WAREHOUSE_NAME, START_TIME ...etc&quot;,&quot;paramName&quot;:&quot;ordering_column&quot;,&quot;paramShortDesc&quot;:&quot;column to order on&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;asc, desc&quot;,&quot;paramName&quot;:&quot;asc_or_desc&quot;,&quot;paramShortDesc&quot;:&quot;Whether you want ascending versus descending order&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;usage_metrics&quot;,&quot;paramName&quot;:&quot;view_name&quot;,&quot;paramShortDesc&quot;:&quot;The desired name of the resulting view&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;row_level_data_security_implementation&quot;,&quot;commandName&quot;:&quot;setup_row_level_security_based_on_column_matches_current_role&quot;,&quot;shortDescription&quot;:&quot;setup row level security to return rows only if data in dept column matches current_role()&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;bigquery&quot;,&quot;paramName&quot;:&quot;data_warehouse&quot;,&quot;paramShortDesc&quot;:&quot;the data warehouse where data is stored and row level security needs to be implemented&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_reader_account_creation &quot;,&quot;commandName&quot;:&quot;create_snowflake_reader_account_to_share_database&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a consultant to suggest a design/architecture for sharing a snowflake database with a user who does not have a snowflake account using a managed reader account. &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;snowflake_data_clean_room_design&quot;,&quot;commandName&quot;:&quot;design_snowflake_clean_room&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a consultants to design a Snowflake data clean room using Row Access Policies, Stored Procedures, Secure Sharing, Streams, Secure Views, and Tasks, with detailed flow, configuration, and code.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;csv, json&quot;,&quot;paramName&quot;:&quot;file_format&quot;,&quot;paramShortDesc&quot;:&quot;format of the raw data file&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;AWS S3&quot;,&quot;paramName&quot;:&quot;cloud_storage&quot;,&quot;paramShortDesc&quot;:&quot;cloud storage name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;sales_amount&gt;1000&quot;,&quot;paramName&quot;:&quot;condition&quot;,&quot;paramShortDesc&quot;:&quot;condition that needs to be met for data to be processed&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;identifying_snowflake_accounts_or_warehouses_without_resource_monitors&quot;,&quot;commandName&quot;:&quot;identifying_snowflake_accounts_or_warehouses_without_resource_monitors&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Data Engineers to identify Snowflake accounts/warehouses without resource monitors using SQL queries with SHOW RESOURCE MONITORS, SHOW WAREHOUSES, and SHOW ACCOUNTS commands.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;consolidated_database_share&quot;,&quot;commandName&quot;:&quot;create_consolidated_database_to_share&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineer to design a workflow to consolidate data present in multiple different databases into a single database, mask PII data, and share this with a non-user of the specified database.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;create_stored_procedure_for_dynamic_testing&quot;,&quot;commandName&quot;:&quot;create_stored_procedure_for_dynamic_testing&quot;,&quot;shortDescription&quot;:&quot;This prompt assists data quality engineers in developing a dynamic testing framework via stored procedures. It validates data conditions across tables using metadata-driven checks, enhancing data integrity and consistency.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Snowflake, PostgreSQL&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_catalog_solution&quot;,&quot;commandName&quot;:&quot;data_platform_to_enable_data_discovery_metadata&quot;,&quot;shortDescription&quot;:&quot;Use a data platform to enable data discovery and metadata management. Explore options for data lineage tracking, data quality monitoring, and data access control&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;BigQuery, Snowflake&quot;,&quot;paramName&quot;:&quot;data_platform&quot;,&quot;paramShortDesc&quot;:&quot;The system or service used to store, manage, and process data&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;create_end-to-end_elt_batch&quot;,&quot;commandName&quot;:&quot;create_end-to-end_elt_batch&quot;,&quot;shortDescription&quot;:&quot;Generate a BigQuery script for an end-to-end batch ELT process, including data extraction, transformation, and loading.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;CAST, CONCAT, IFNULL, FORMAT, INSERT, DELETE, MERGE&quot;,&quot;paramName&quot;:&quot;transformation_list&quot;,&quot;paramShortDesc&quot;:&quot;Modifications to be carried out on samples from within the data set&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Match only files that start with sales_data_, Match files starting with daily_report_2024, Match all CSV files in the bucket&quot;,&quot;paramName&quot;:&quot;input_file_matching_condition&quot;,&quot;paramShortDesc&quot;:&quot;The identifying feature of the data set that can be used to trigger an event when a condition is met&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;s3_to_snowflake_lambda_function&quot;,&quot;commandName&quot;:&quot;s3_to_snowflake_lambda_function&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineer through designing through using AWS Lambda to read and ingest data from an S3 Bucket into a target table in Snowflake. \t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, Java, Go, PowerShell, Javascript, C#, Ruby&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The coding language the lambda function will be written in.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;setup_dynamic_data_masking&quot;,&quot;commandName&quot;:&quot;setup_ddm_to_show_password_column_data_only_for_users_with_account_admin_role&quot;,&quot;shortDescription&quot;:&quot;Setup dynamic data masking to show password column data only for users with account admin role&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Password column&quot;,&quot;paramName&quot;:&quot;sensitive_data&quot;,&quot;paramShortDesc&quot;:&quot;Sensitive data column&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_fact_table_creation_using_dbt&quot;,&quot;commandName&quot;:&quot;snowflake_fact_table_creation_using_dbt&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineer through the creation of a fact table in Snowflake by joining two or more tables and performing some logic using DBT.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Sales, Products, Orders, Inventory, Customers, Employees&quot;,&quot;paramName&quot;:&quot;table1_name&quot;,&quot;paramShortDesc&quot;:&quot;The name you would like to provide the first of your source tables with, pertaining to the type of data it contains&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;order_id, product_id, customer_id, quantity, price, order_date&quot;,&quot;paramName&quot;:&quot;table1_columns&quot;,&quot;paramShortDesc&quot;:&quot;A list of column titles representing the data  within the the first source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Sales, Products, Orders, Inventory, Customers, Employees&quot;,&quot;paramName&quot;:&quot;table2_name&quot;,&quot;paramShortDesc&quot;:&quot;The name you would like to provide the second of your source tables with, pertaining to the type of data it contains&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;order_id, product_id, customer_id, quantity, price, order_date&quot;,&quot;paramName&quot;:&quot;table2_columns&quot;,&quot;paramShortDesc&quot;:&quot;A list of column titles representing the data  within the the second source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;sales_summary&quot;,&quot;paramName&quot;:&quot;fact_table_name&quot;,&quot;paramShortDesc&quot;:&quot;The name given to the fact table containing aggregate data from both source tables or an external source&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Aggregate sales data by category and order_date&quot;,&quot;paramName&quot;:&quot;logic_to_apply&quot;,&quot;paramShortDesc&quot;:&quot;The transformations, modifications or handling to be applied to the data that will be stored within the fact table&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_snowpark_local_machine_bulk_load&quot;,&quot;commandName&quot;:&quot;snowflake_snowpark_local_machine_bulk_load&quot;,&quot;shortDescription&quot;:&quot;This prompt aids data engineers in efficiently bulk loading local files into Snowflake using Snowpark. It involves creating a named internal stage, uploading files, and copying data to a Snowflake table.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, Java, Scala, C# ...etc&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Programming language to be used&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;exp: my_internal_stage&quot;,&quot;paramName&quot;:&quot;stage_name&quot;,&quot;paramShortDesc&quot;:&quot;Name of the internal stage&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;exp: ecommerce_bronze&quot;,&quot;paramName&quot;:&quot;landing_table_name&quot;,&quot;paramShortDesc&quot;:&quot;Name of the landing (destination) table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;exp: C:\\Users\\&lt;username&gt;\\Documents\\ecommerce\\&quot;,&quot;paramName&quot;:&quot;local_directory_path&quot;,&quot;paramShortDesc&quot;:&quot;path to your local directory to source the files from&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_data_quality_stored_procedure\t&quot;,&quot;commandName&quot;:&quot;snowflake_data_quality_stored_procedure\t&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a database administrator through the process of creating a snowflake sql stored procedure to perform data quality checks on a source table and log issues into another table. \t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Products, Inventory, Customers, Employees&quot;,&quot;paramName&quot;:&quot;source_table_name&quot;,&quot;paramShortDesc&quot;:&quot;The title to provide the source table with&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Table structure: \n    - transaction_id: INT\n    - customer_id: INT\n    - transaction_date: DATE\n    - amount: DECIMAL(10,2)\n    - status: VARCHAR(50)&quot;,&quot;paramName&quot;:&quot;source_table_schema&quot;,&quot;paramShortDesc&quot;:&quot;The structure the source table should possess, characterised by a list of column titles and their data types&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;check for null values in transaction_id and amount\n\nensure composite of transaction_id and customer_id are unique\n\nvalidate that the amount is greater than 0\ncheck status is valid ('complete', 'pending', 'cancelled')&quot;,&quot;paramName&quot;:&quot;condition_list&quot;,&quot;paramShortDesc&quot;:&quot;The conditions by which data quality assurance can be carried out&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_bronze_to_silver_transformation_using_snowpark&quot;,&quot;commandName&quot;:&quot;transform_bronze_to_silver_using_snowpark&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Data Engineers to read data from Snowflake Bronze Schema, transform it using Snowpark, and save results in a Silver table. Includes filtering, timestamping, and daily clustering.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Java, Python, Scala&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Language used for Snowpark script generation&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_user_inactivity_check&quot;,&quot;commandName&quot;:&quot;identify_inactive_users_snowflake&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Data Engineer to identify inactive users in a Snowflake environment by analysing certain criteria. \t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;login, query executions, user permissions&quot;,&quot;paramName&quot;:&quot;criteria_to_check&quot;,&quot;paramShortDesc&quot;:&quot;The aspects of the Snowflake environment to be analysed&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;QUERY_HISTORY, LOGIN_HISTORY, USER_JOBS, USER_PERMISSIONS&quot;,&quot;paramName&quot;:&quot;data_sources&quot;,&quot;paramShortDesc&quot;:&quot;The Snowflake tables you will reference to assess the Snowflake environment&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;identify_snowflake_accounts_without_network_policy\t&quot;,&quot;commandName&quot;:&quot;identify_snowflake_accounts_without_network_policy\t&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Snowflake orgadmin in identifying which accounts in the Snowflake environment do not have a Network Policy.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;snowflake.account_usage&quot;,&quot;paramName&quot;:&quot;account_usage_schema&quot;,&quot;paramShortDesc&quot;:&quot;account schema name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;NETWORK_POLICIES&quot;,&quot;paramName&quot;:&quot;network_policy_view&quot;,&quot;paramShortDesc&quot;:&quot;network policy view&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_etl_stored_procedure&quot;,&quot;commandName&quot;:&quot;create_snowflake_etl_stored_procedure\t&quot;,&quot;shortDescription&quot;:&quot;This prompt helps an ETL developer create a snowflake stored procedure for complex data transformations and aggregations&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;customer, reference, orders, employees, inventory&quot;,&quot;paramName&quot;:&quot;table1_name&quot;,&quot;paramShortDesc&quot;:&quot;The name to be provided to the first source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer_id, first_name, last_name, order_history, order_id&quot;,&quot;paramName&quot;:&quot;table1_columns&quot;,&quot;paramShortDesc&quot;:&quot;A series of columns to populate the first source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer, reference, orders, employees, inventory&quot;,&quot;paramName&quot;:&quot;table2_name&quot;,&quot;paramShortDesc&quot;:&quot;The name to be provided to the second source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer_id, first_name, last_name, order_history, order_id&quot;,&quot;paramName&quot;:&quot;table2_columns&quot;,&quot;paramShortDesc&quot;:&quot;A series of columns to populate the second source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer, reference, orders, employees, inventory&quot;,&quot;paramName&quot;:&quot;table3_name&quot;,&quot;paramShortDesc&quot;:&quot;The name to be provided to the third source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer_id, first_name, last_name, order_history, order_id&quot;,&quot;paramName&quot;:&quot;table3_columns&quot;,&quot;paramShortDesc&quot;:&quot;A series of columns to populate the third source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer, reference, orders, employees, inventory&quot;,&quot;paramName&quot;:&quot;table4_name&quot;,&quot;paramShortDesc&quot;:&quot;The name to be provided to the fourth source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer_id, first_name, last_name, order_history, order_id&quot;,&quot;paramName&quot;:&quot;table4_columns&quot;,&quot;paramShortDesc&quot;:&quot;A series of columns to populate the fourth source table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;order_summary, purchasing_trends, customer_summary&quot;,&quot;paramName&quot;:&quot;target_table_name&quot;,&quot;paramShortDesc&quot;:&quot;The name to be provided to the target table the will be modified as a result of your transformations involving the previous source tables&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;customer_id, full_name, order_method, purchase_history, order_id&quot;,&quot;paramName&quot;:&quot;target_table_columns&quot;,&quot;paramShortDesc&quot;:&quot;The columns belonging to the target table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Produce a union of all of usa_orders &amp; non_usa_orders,  join orders with the customer and dept tables using the latest row based on the load_dt column before then performing the below transformations, \nWrite a monthly summary to cust_orders_summary table summarised by order_mth column&quot;,&quot;paramName&quot;:&quot;transformation_logic_list&quot;,&quot;paramShortDesc&quot;:&quot;The transformative processes to be carried out using the data from the reference tables to be carried over to the target table&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_read_mount_location&quot;,&quot;commandName&quot;:&quot;databricks_read_mount_location&quot;,&quot;shortDescription&quot;:&quot;As a Engineer, refine the below Prompt as per the given usecase and description with the data team in provided URL/Shared Excel Sheet.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;processing_date&quot;,&quot;paramName&quot;:&quot;partition_column&quot;,&quot;paramShortDesc&quot;:&quot;partition column name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Order_Date: The date the product was ordered.&quot;,&quot;paramName&quot;:&quot;source_file_structure&quot;,&quot;paramShortDesc&quot;:&quot;csv source file structure&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Calculate aggregated `Sales`\n`Quantity` and `Profit` for each `Product_Category`&quot;,&quot;paramName&quot;:&quot;aggregate_source_data_details&quot;,&quot;paramShortDesc&quot;:&quot;data source&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Plot the top 10 highest Total Sales Profit against the Product_Category&quot;,&quot;paramName&quot;:&quot;visualization_details&quot;,&quot;paramShortDesc&quot;:&quot;data visualisation information&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;azure_function_landing&quot;,&quot;commandName&quot;:&quot;azure_function_landing&quot;,&quot;shortDescription&quot;:&quot;Secure Data Movement/Copying from ADLS Landing Zone Data Container \&quot;landingzone\&quot; to a Target  Container \&quot;rawzone\&quot; using Azure Function&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Verify the first column in all rows of the file contain a date string formatted YYYY-MM-DD.&quot;,&quot;paramName&quot;:&quot;file_checks_condition&quot;,&quot;paramShortDesc&quot;:&quot;List of checks to be performed on file&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_automation_with_github_actions&quot;,&quot;commandName&quot;:&quot;create_github_actions_workflow_for_snowflake\t&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineer to create in setting up a GitHub Actions workflow to automatiically execute code in Snowflake whenever it is loaded/updated into a github repository&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;snowflake_stored_procedure_metadata_pipe_refresh&quot;,&quot;commandName&quot;:&quot;create_procedure_to_refresh_external_tables_based_on_pipe&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a data engineer to create a stored procedure that accepts a pipeline name as a parameter and generate a command to refresh external tables.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;- Databases\n - Schema\n - Table&quot;,&quot;paramName&quot;:&quot;metadata_table_fields&quot;,&quot;paramShortDesc&quot;:&quot;The areas of interest within the metadata table to be taken from by the stored procedure&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;The procedure should only select rows from the metadata table where the value in the pipeline_name column matches the pipeline parameter created earlier and where the refresh_indicator is 'y'.&quot;,&quot;paramName&quot;:&quot;conditions_to_filter_row&quot;,&quot;paramShortDesc&quot;:&quot;The rules by which the metadata table should filter out specific results&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;- Database: String\n - Schema: String\n - Table: String\n - Pipeline_name: String\n - Refresh_indicator: String&quot;,&quot;paramName&quot;:&quot;metadata_table_structure&quot;,&quot;paramShortDesc&quot;:&quot;The fields and/or columns to be prescribed to the metadata table&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_table_dq_check&quot;,&quot;commandName&quot;:&quot;databricks_table_dq_check&quot;,&quot;shortDescription&quot;:&quot;Generate a Pyspark in Databricks to perform data quality checks on a target table and log any data quality issues.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;sage.data_quality &quot;,&quot;paramName&quot;:&quot;target_file_structure&quot;,&quot;paramShortDesc&quot;:&quot;target table name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;transaction_id\n&quot;,&quot;paramName&quot;:&quot;target_table_dq_issues_structure&quot;,&quot;paramShortDesc&quot;:&quot;column names of table&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;check for null values in transaction_id&quot;,&quot;paramName&quot;:&quot;data_quality_checks&quot;,&quot;paramShortDesc&quot;:&quot;Data quality checks&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;query_optimisation_suggestions&quot;,&quot;commandName&quot;:&quot;query_optimisation_suggestions&quot;,&quot;shortDescription&quot;:&quot;Provide a list of resource-intensive or frequently executed queries from BigQuery INFORMATION_SCHEMA to identify optimization opportunities.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;2, 5, 7, 10, 28, 31&quot;,&quot;paramName&quot;:&quot;No_of_days&quot;,&quot;paramShortDesc&quot;:&quot;The amount of days over which you would like to analyse BigQuery's INFORMATION_SCHEMA&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;\&quot;Total slot time\&quot;, \&quot;Average execution time\&quot;, \&quot;Number of executions\&quot;, \&quot;CPU utilisation\&quot;&quot;,&quot;paramName&quot;:&quot;list_of_KPIs&quot;,&quot;paramShortDesc&quot;:&quot;The number of Key Performance Indicators you would like to analyse over a given amount of days&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;snowflake_reporting_with_aws_lambda&quot;,&quot;commandName&quot;:&quot;snowflake_reporting_with_aws_lambda&quot;,&quot;shortDescription&quot;:&quot;This prompt guides a Data Engineers to automate Snowflake reporting using Task, AWS Lambda, and S3. Includes copying query results to S3, triggering Lambda for HTML conversion, and emailing results.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;python&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;language&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;creation_of_test_data_or_scenarios_for_various_test_cases&quot;,&quot;commandName&quot;:&quot;generate_test_data_based_on_provided_structure&quot;,&quot;shortDescription&quot;:&quot;Generate test data based on provided structure&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;1. cust_id char primary key\n2. dummy_seq1 sequence\n3. dummy_seq2 odd number sequence\n4. dummy_seq3 even number sequence\n5. Name char&quot;,&quot;paramName&quot;:&quot;list_of_columns&quot;,&quot;paramShortDesc&quot;:&quot;A list of the kind of data that is stored within the given list of columns the artificial data is based on.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aws_lambda_landing&quot;,&quot;commandName&quot;:&quot;aws_lambda_landing&quot;,&quot;shortDescription&quot;:&quot;Data Reading/Ingestion from AWS S3 Landing Zone Data folder \&quot;landingzone\&quot; to a target folder 'rawzone' using AWS Lambda&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Implementation language&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Verify the first column in all rows of the file contain a date string formatted YYYY-MM-DD.&quot;,&quot;paramName&quot;:&quot;file_checks_condition&quot;,&quot;paramShortDesc&quot;:&quot;List of file level checks to be performed&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;databricks_process_from_landing_and_data_quality_check&quot;,&quot;commandName&quot;:&quot;databricks_process_from_landing_and_data_quality_check&quot;,&quot;shortDescription&quot;:&quot;Data Reading/Ingestion from Landing Zone Data Container \&quot;landing-zone\&quot;, perform data quality checks on input file before moving it into a 'staging' location &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, Scala&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Implementation Language&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;transaction_id, customer_id,transaction_date,amount, status&quot;,&quot;paramName&quot;:&quot;target_file_structure&quot;,&quot;paramShortDesc&quot;:&quot;Input file structure&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;transaction_id,customer_id,transaction_date,amount,status&quot;,&quot;paramName&quot;:&quot;target_table_dq_issues_structure&quot;,&quot;paramShortDesc&quot;:&quot;Log file structure&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;- Check for null values in transaction_id, customer_id, transaction_date, and amount\n- Ensure composite of transaction_id and customer_id are unique, write all rows that are not unique, do not group by\n- Validate that the amount is greater than 0\n- Check is status is valid ('complete', 'pending', 'cancelled')&quot;,&quot;paramName&quot;:&quot;data_quality_checks&quot;,&quot;paramShortDesc&quot;:&quot;Data checks to be performed on file&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_ingestion_process_from_cloud_storage_to_target_table&quot;,&quot;commandName&quot;:&quot;data_ingestion_process_from_cloud_storage_to_target_table&quot;,&quot;shortDescription&quot;:&quot;Data Reading/Ingestion from Cloud Storage Landing Zone to a Target Table in a Data Processing Platform.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Engineering&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;PySpark, Java&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Amazon S3, Google Cloud Storage&quot;,&quot;paramName&quot;:&quot;cloud_provider_storage&quot;,&quot;paramShortDesc&quot;:&quot;The cloud service used for storing and accessing data files.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Databricks&quot;,&quot;paramName&quot;:&quot;cloud_provider_compute&quot;,&quot;paramShortDesc&quot;:&quot;The cloud service that offers computing resources for processing data.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;AWS, GCP&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;The cloud platform or service provider.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;performance_metric_dashboard&quot;,&quot;commandName&quot;:&quot;performance_metric_dashboard&quot;,&quot;shortDescription&quot;:&quot;Helps in generating code to create dashboards that display various metrics related to model performance, such as accuracy, precision, recall, and AUC-ROC.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Neural network, Random Forest, Decision Tree, Supporting Vector Machine&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The utilised machine learning model to be trained on a provided data set before being practically applied to a business case.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;feature_importance_visualisation&quot;,&quot;commandName&quot;:&quot;feature_importance_visualisation&quot;,&quot;shortDescription&quot;:&quot;Useful for creating visualisations that show the importance of different features in a machine learning model.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Neural network, Random Forest, Decision Tree, Supporting Vector Machine&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The utilised machine learning model to be trained on a provided data set before being used to identify a chosen variable.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;House price, Customer Churn, Survival status, Sales revenue, Product Rating, Energy consumption, Loan default&quot;,&quot;paramName&quot;:&quot;target_variable&quot;,&quot;paramShortDesc&quot;:&quot;The business area a machine learning model will be used to predict&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;privacy_modelling_methods&quot;,&quot;commandName&quot;:&quot;privacy_modelling_methods&quot;,&quot;shortDescription&quot;:&quot;Helps in generating code to incorporate privacy-preserving methods into machine learning models, such as differential privacy or federated learning.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Differential Privacy, Federated Learning, Homomorphic Encryption, Secure Multi-Party Computation (MPC), Synthetic Data Generation, Encrypted Inference&quot;,&quot;paramName&quot;:&quot;privacy_method&quot;,&quot;paramShortDesc&quot;:&quot;The method or mechanism used to ensure full privacy and protection of data used within the development of a machine learning model&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;model_monitoring_system&quot;,&quot;commandName&quot;:&quot;model_monitoring_system&quot;,&quot;shortDescription&quot;:&quot;Useful for creating a system to continuously monitor the performance of deployed machine learning models in production.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Neural network, Random Forest, Decision Tree, Supporting Vector Machine&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The utilised machine learning model to be trained on a provided data set before being practically applied to a business case.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;synthetic_data_generation&quot;,&quot;commandName&quot;:&quot;synthetic_data_generation&quot;,&quot;shortDescription&quot;:&quot;Useful for generating synthetic datasets with specific characteristics for testing machine learning models when real data is insufficient or unavailable.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;1000, 500, 250&quot;,&quot;paramName&quot;:&quot;number_of_samples&quot;,&quot;paramShortDesc&quot;:&quot;The number of units or unique points of data that comprise a data set&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;['age', 'income', 'purchases', 'gender']&quot;,&quot;paramName&quot;:&quot;features_list&quot;,&quot;paramShortDesc&quot;:&quot;The categorical data used to train a machine learning model&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;normal, lognormal, poisson&quot;,&quot;paramName&quot;:&quot;distribution_type&quot;,&quot;paramShortDesc&quot;:&quot;The frequency with which features within the data set occur&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;generate_data_preprocessing_code&quot;,&quot;commandName&quot;:&quot;generate_data_preprocessing_code&quot;,&quot;shortDescription&quot;:&quot;This prompt is useful for generating code that handles common data preprocessing tasks such as missing value imputation, feature scaling, and encoding categorical variables&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Imputation (Mean, Median, Mode, regression, k-Nearest Neighbours), forward/backward fill, Interpolation&quot;,&quot;paramName&quot;:&quot;missing_value_strategy&quot;,&quot;paramShortDesc&quot;:&quot;A mechanism used to impute values missing from a given data set: Absent values are inferred, and filled in with an estimate based on the chosen strategy.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;StandardScaler, MinMaxScaler, RobustScaler&quot;,&quot;paramName&quot;:&quot;scaling_method&quot;,&quot;paramShortDesc&quot;:&quot;Adjusts the range of a set of numerical data features to ensure they rely on a similar or the same scale&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;One-hotEncoder, OrdinalEncoder, TargetEncoder, LabelEncoder, CountEncoder&quot;,&quot;paramName&quot;:&quot;encoding_method&quot;,&quot;paramShortDesc&quot;:&quot;Converts categorical data features into comparable numerical units.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;hyperparameter_tuning&quot;,&quot;commandName&quot;:&quot;hyperparameter_tuning&quot;,&quot;shortDescription&quot;:&quot;This prompt assists in suggesting hyperparameter tuning strategies for improving model performance.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Random Forest model&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The utilised machine learning model to be trained on a provided data set before being used to identify a chosen variable.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;n_estimators\nmax_depth\nmin_samples_split\nand max_features&quot;,&quot;paramName&quot;:&quot;parameter_list&quot;,&quot;paramShortDesc&quot;:&quot;A list of features used to optimise the chosen model for performance. These determine how the model will learn and operate going forward&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;transfer_learning_with_pretrained_models&quot;,&quot;commandName&quot;:&quot;transfer_learning_with_pretrained_models&quot;,&quot;shortDescription&quot;:&quot;Helps in creating code for leveraging pretrained models to accelerate the development of new models through transfer learning.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;VGG16&quot;,&quot;paramName&quot;:&quot;pretrained_model&quot;,&quot;paramShortDesc&quot;:&quot;Name of pre-trained model&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Classification of urban street signs&quot;,&quot;paramName&quot;:&quot;task_description&quot;,&quot;paramShortDesc&quot;:&quot;Description of task requirement for prediction&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;model_deployment_code_generation&quot;,&quot;commandName&quot;:&quot;model_deployment&quot;,&quot;shortDescription&quot;:&quot;This prompt helps generate code snippets required for deploying machine learning models into production environments.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Neural network, Random Forest, Decision Tree, Supporting Vector Machine&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The utilised machine learning model to be trained on a provided data set before deployment on a chosen platform&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;AWS SageMaker, Kubernetes, Google CLoud AI Platform, Heroku, Flask&quot;,&quot;paramName&quot;:&quot;deployment_platform&quot;,&quot;paramShortDesc&quot;:&quot;The third party tool that will be used to host the model for continued integration, management and deployment into a production environment&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;end_to_end_pipeline_design&quot;,&quot;commandName&quot;:&quot;end_to_end_pipeline_design&quot;,&quot;shortDescription&quot;:&quot;This prompt helps in designing an end-to-end data pipeline for processing and using data in machine learning workflows.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Customer Churn Prediction, Sentiment Analysis, Fraud Detection&quot;,&quot;paramName&quot;:&quot;specific_ml_task&quot;,&quot;paramShortDesc&quot;:&quot;Refers to the particular machine learning objective or problem the pipeline is designed to solve.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;basic_ml_model_building&quot;,&quot;commandName&quot;:&quot;basic_ml_model_building&quot;,&quot;shortDescription&quot;:&quot;Helps write a basic code to create a ML model to help get started on the task.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;model_explainability&quot;,&quot;commandName&quot;:&quot;model_explainability&quot;,&quot;shortDescription&quot;:&quot;Assists in generating code to provide explanations for model predictions through counterfactual examples, enhancing interpretability.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;neural network, decision tree&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The type of machine learning model being used&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;synthetic_data_generation_code&quot;,&quot;commandName&quot;:&quot;synthetic_data_generation_code&quot;,&quot;shortDescription&quot;:&quot;Useful for generating examples to test and improve the robustness of machine learning models against small but intentional perturbations.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;adversarial examples, synthetic data&quot;,&quot;paramName&quot;:&quot;examples_type&quot;,&quot;paramShortDesc&quot;:&quot;Types of examples generated to test or analyse the model’s performance&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;neural network, decision tree&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The type of machine learning model being used&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;CIFAR-10 image classification dataset&quot;,&quot;paramName&quot;:&quot;dataset_description&quot;,&quot;paramShortDesc&quot;:&quot;A brief overview of the dataset on which the model is to be trained&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;self_supervised_model_training&quot;,&quot;commandName&quot;:&quot;self_supervised_model_training&quot;,&quot;shortDescription&quot;:&quot;Useful for leveraging self-supervised learning to improve model performance with minimal labeled data by using unlabelled data for pretraining.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Resnet&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;Machine learning model for problem&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;contrastive learning&quot;,&quot;paramName&quot;:&quot;self_supervised_method&quot;,&quot;paramShortDesc&quot;:&quot;self supervised learning method&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;model_building_case_2&quot;,&quot;commandName&quot;:&quot;model_building_case_2&quot;,&quot;shortDescription&quot;:&quot;Helps in generating code for models that combine multiple types of data (e.g., text and images) to improve performance and insights.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;product reviews, comments, articles, demonstrations&quot;,&quot;paramName&quot;:&quot;textual_data_description&quot;,&quot;paramShortDesc&quot;:&quot;Instructions for the kind of verbal descriptions of a given topic or object the model should process&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Descriptions for images found on some of the following:\ne-commerce site, catalogues, forums&quot;,&quot;paramName&quot;:&quot;image_data_description&quot;,&quot;paramShortDesc&quot;:&quot;Instructions for the description of an image or visual depiction of a given topic or object the model should process&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;model_interpretation_explainability_code&quot;,&quot;commandName&quot;:&quot;model_interpretation_explainability_code&quot;,&quot;shortDescription&quot;:&quot;Helps in creating code to explain and interpret the predictions made by machine learning models, making them more transparent.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;python, java&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;random forest, decision tree&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The type of machine learning model for which predictions are being interpreted&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;data_pipeline_automation&quot;,&quot;commandName&quot;:&quot; data_pipeline_automation&quot;,&quot;shortDescription&quot;:&quot;Helps in automating the data pipeline processes from data ingestion to model training, reducing manual intervention.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Python, Java&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Customer Churn Prediction, Sentiment Analysis, Fraud Detection&quot;,&quot;paramName&quot;:&quot;specific_ml_task&quot;,&quot;paramShortDesc&quot;:&quot;Refers to the particular machine learning objective or problem the pipeline is designed to solve.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;queries_for_optimisation_suggestions&quot;,&quot;commandName&quot;:&quot;queries_for_optimisation_suggestions&quot;,&quot;shortDescription&quot;:&quot;Provide a list of resource-intensive or frequently executed queries from BigQuery INFORMATION_SCHEMA to identify optimisation opportunities.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;7,14,21,28&quot;,&quot;paramName&quot;:&quot;no_of_days&quot;,&quot;paramShortDesc&quot;:&quot;The amount of days you would like to assess the performance of the implementation by.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;\&quot;Total slot time\&quot;, \&quot;Average execution time\&quot;, \&quot;Number of executions\&quot;, \&quot;CPU utilisation\&quot;&quot;,&quot;paramName&quot;:&quot;list_of_KPIs&quot;,&quot;paramShortDesc&quot;:&quot;A series of Key performance indicators which are quantifiable metrics by which to gauge performance&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;create_machine_learning_function_unit_tests&quot;,&quot;commandName&quot;:&quot;machine_learning_function_unit_tests&quot;,&quot;shortDescription&quot;:&quot;This prompt helps in generating unit tests for functions used in machine learning models, ensuring that they perform as expected and handle edge cases.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;name of function&quot;,&quot;paramName&quot;:&quot;function_names&quot;,&quot;paramShortDesc&quot;:&quot;functions for testing&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;model_building_case_1&quot;,&quot;commandName&quot;:&quot;model_building_case_1&quot;,&quot;shortDescription&quot;:&quot;Assists in creating models that handle multiple objectives simultaneously, optimizing trade-offs between different goals.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Minimise cost, maximise product quality,\nminimise energy consumption, maximise production output, maximise accuracy and minimise model complexity, maximise customer satisfaction and minimise delivery time&quot;,&quot;paramName&quot;:&quot;objective_1&quot;,&quot;paramShortDesc&quot;:&quot;A primary goal for the trained model to attain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Minimise cost, maximise product quality,\nminimise energy consumption, maximise production output, maximise accuracy and minimise model complexity, maximise customer satisfaction and minimise delivery time&quot;,&quot;paramName&quot;:&quot;objective_2&quot;,&quot;paramShortDesc&quot;:&quot;A primary goal for the trained model to attain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Pareto optimisation, Simulated annealing, Weighted Sum Method, Multi-objective Particle Swarm Optimisation (MOPSO)&quot;,&quot;paramName&quot;:&quot;optimisation_technique&quot;,&quot;paramShortDesc&quot;:&quot;A method or mechanism employed to determine whether a training model can arrive at an expected or reasonable outcome&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;model_evaluation_against_adversarial_attacks&quot;,&quot;commandName&quot;:&quot;model_evaluation&quot;,&quot;shortDescription&quot;:&quot;Helps in creating evaluations for how robust a model is to various types of adversarial attacks, ensuring reliability.\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Science&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Convolutional Neural Network, Random Forest, Neural Network, K-Nearest Neighbours, Recurrent Neural Network&quot;,&quot;paramName&quot;:&quot;model_type&quot;,&quot;paramShortDesc&quot;:&quot;The kind of machine learning model in question that will be evaluated for its robustness when responding to adversarial attacks&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;youtube_video_tracking_using_adobe_launch&quot;,&quot;commandName&quot;:&quot;youtube_video_tracking_using_adobe_launch&quot;,&quot;shortDescription&quot;:&quot;JavaScript code to track YouTube videos using Adobe Launch&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Start, Pause&quot;,&quot;paramName&quot;:&quot;video_events_list&quot;,&quot;paramShortDesc&quot;:&quot;The list of video events that should be tracked&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;automate_data_extraction_reporting&quot;,&quot;commandName&quot;:&quot;automate_data_extraction_reporting&quot;,&quot;shortDescription&quot;:&quot;Automate a manual task of running SQL queries in a postgresql on a daily/weekly/monthly basis to extract data and push to another db which is connected to a visualization tool&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;MySQL&quot;,&quot;paramName&quot;:&quot;dbname1&quot;,&quot;paramShortDesc&quot;:&quot;Database name which is having the data &quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Matomo&quot;,&quot;paramName&quot;:&quot;tool&quot;,&quot;paramShortDesc&quot;:&quot;Analytical tool name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;python/scala&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;The programming language in which the code should be generated&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;PostgresSQL&quot;,&quot;paramName&quot;:&quot;dbname2&quot;,&quot;paramShortDesc&quot;:&quot;Database name where the data to be copied/inserted&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;daily, weekly&quot;,&quot;paramName&quot;:&quot;frequency&quot;,&quot;paramShortDesc&quot;:&quot;Frequency of the data to fetch from db&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;sql_query_ to_extract_metrics_from_db_in_particular_ time_zone&quot;,&quot;commandName&quot;:&quot;sql_query_ to_extract_metrics_from_db_in_particular_ time_zone&quot;,&quot;shortDescription&quot;:&quot;SQL query to extract metrics from on premise database in a particular time zone for a particular frequency&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;average visit duration&quot;,&quot;paramName&quot;:&quot;metric&quot;,&quot;paramShortDesc&quot;:&quot;The specific measurement or calculation you want to extract from the analytics tool&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Matomo on-premise&quot;,&quot;paramName&quot;:&quot;analytics_tool&quot;,&quot;paramShortDesc&quot;:&quot;The name of the analytics tool being used&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;MySQL&quot;,&quot;paramName&quot;:&quot;database_type&quot;,&quot;paramShortDesc&quot;:&quot;The database that stores the analytics data&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Monthly, Weekly&quot;,&quot;paramName&quot;:&quot;frequency&quot;,&quot;paramShortDesc&quot;:&quot;The time period over which the metric should be calculated &quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;United States&quot;,&quot;paramName&quot;:&quot;country&quot;,&quot;paramShortDesc&quot;:&quot; The country whose time zone will be used for the query &quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;generating_dax expression_in_powerbi&quot;,&quot;commandName&quot;:&quot;generating_dax expression_in_powerbi&quot;,&quot;shortDescription&quot;:&quot;Generate a DAX expression in Power BI for  for calculating the difference in hours between service now ticket open and close time&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;number&quot;,&quot;paramName&quot;:&quot;no_of_countries&quot;,&quot;paramShortDesc&quot;:&quot;number of countries to compare &quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;list&quot;,&quot;paramName&quot;:&quot;country_list&quot;,&quot;paramShortDesc&quot;:&quot;list of countries to be compared&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;time&quot;,&quot;paramName&quot;:&quot;start_time&quot;,&quot;paramShortDesc&quot;:&quot;starting time for ticket time comparison&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;time&quot;,&quot;paramName&quot;:&quot;end_time&quot;,&quot;paramShortDesc&quot;:&quot;ending time for ticket time comparison&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;tag_generation_governance&quot;,&quot;commandName&quot;:&quot;tag_generation_governance&quot;,&quot;shortDescription&quot;:&quot;Build a tagging guide for implementing events in Matomo tool for a travel and tourism mobile app\nGenerating Guidelines for generating Tagging guides for specific pages. Applicable for:\nAdobe Analytics ( Adobe Launch)\nGoogle Analytics (GA4) Matomo&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Account Management Screen&quot;,&quot;paramName&quot;:&quot;screen_name&quot;,&quot;paramShortDesc&quot;:&quot;screen name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;FAQ link&quot;,&quot;paramName&quot;:&quot;CTA&quot;,&quot;paramShortDesc&quot;:&quot;Click to Action link&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Opens screen with search bar&quot;,&quot;paramName&quot;:&quot;CTA_action_description&quot;,&quot;paramShortDesc&quot;:&quot;Click to Action Description&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;adobe_analytics_data_layer_code&quot;,&quot;commandName&quot;:&quot;adobe_analytics_data_layer_code&quot;,&quot;shortDescription&quot;:&quot;Boiler plate dataLayer code for tracking ecommerce site using Adobe Analytics&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;pagename, pagetype, user details, login status, product id, product name&quot;,&quot;paramName&quot;:&quot;dimensions_list&quot;,&quot;paramShortDesc&quot;:&quot;list of dimensions like [dimension1],[dimension2],[dimension3],... [dimensionN]&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;report_generation_using_ga4_apis&quot;,&quot;commandName&quot;:&quot;report_generation_using_ga4_apis&quot;,&quot;shortDescription&quot;:&quot;Boiler plate code to generate reports programmatically via the GA4 APIs&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;snowflake_database_administration_queries&quot;,&quot;commandName&quot;:&quot;snowflake_performance_and_usage_queries_for_database_administrators&quot;,&quot;shortDescription&quot;:&quot;This prompt helps a database administrator generate queries to retrieve various performance, usage, and optimization metrics from snowflake queries&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;query&quot;,&quot;paramName&quot;:&quot;queries&quot;,&quot;paramShortDesc&quot;:&quot;description of queries to be optimised or generated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;experience_development_for_adobe_target&quot;,&quot;commandName&quot;:&quot;experience_development_for_adobe_target&quot;,&quot;shortDescription&quot;:&quot;Build Design experience for identified test cases for optimisation. This will reduce on the dependency UX/UI person and the Target developer can be self sufficient. Support platforms like Adobe Target/ or any Optimisation tool\t&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;&lt;div class=\&quot;icon-button\&quot;&gt;\n     &lt;a class=\&quot;btn\&quot; href=\&quot;#\&quot;&gt;\n         &lt;i class=\&quot;icon-brochure\&quot;&gt;&lt;/i&gt;\n     &lt;/a&gt;\n&lt;/div&gt;&quot;,&quot;paramName&quot;:&quot;code_in_selection&quot;,&quot;paramShortDesc&quot;:&quot;A front end code block, component, or element containing Document Object Model (DOM) elements to be modified.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;li (list item), ul (unordered list), btn(button), div(divider), a(anchor), i(italic)&quot;,&quot;paramName&quot;:&quot;DOM_element_name&quot;,&quot;paramShortDesc&quot;:&quot;The web browser element that you wish to modify&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Hidden, visible, enabled, disabled, active, inactive, hovered, not hovered, checked, unchecked, focused, blurred, loading, loaded&quot;,&quot;paramName&quot;:&quot;current_state&quot;,&quot;paramShortDesc&quot;:&quot;The present appearance or behaviour if the chosen DOM element&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Hidden, visible, enabled, disabled, active, inactive, hovered, not hovered, checked, unchecked, focused, blurred, loading, loaded&quot;,&quot;paramName&quot;:&quot;future_state&quot;,&quot;paramShortDesc&quot;:&quot;The appearance or behaviour you want the DOM element to adopt after modification&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;ga4_mobile_implementation_using_firebase&quot;,&quot;commandName&quot;:&quot;ga4_mobile_implementation_using_firebase&quot;,&quot;shortDescription&quot;:&quot;Generate firebase event with parameters&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;{\&quot;item_id\&quot;: \&quot;12345\&quot;, \&quot;price\&quot;: 9.99, \&quot;currency\&quot;: \&quot;USD\&quot;}&quot;,&quot;paramName&quot;:&quot;list_of_parameters&quot;,&quot;paramShortDesc&quot;:&quot;The list of key-value pairs that provide details about the event being logged&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;creation_of_treasure_data_workflow&quot;,&quot;commandName&quot;:&quot;creation_of_treasure_data_workflow&quot;,&quot;shortDescription&quot;:&quot;Workflow in treasure data to copy the encrypted file from Google Cloud Service and load into a table in treasure data&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Data Analytics&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;GCP, Azure, AWS&quot;,&quot;paramName&quot;:&quot;cloud_provider&quot;,&quot;paramShortDesc&quot;:&quot;Any cloud provider&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aem_site_structure_create_foundational&quot;,&quot;commandName&quot;:&quot;aem_site_structure_create_foundational&quot;,&quot;shortDescription&quot;:&quot;aem site structure creation foundation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;MarTech&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;jfkairport&quot;,&quot;paramName&quot;:&quot;clientName&quot;,&quot;paramShortDesc&quot;:&quot;name of the client&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;&lt;urlset xmlns=\&quot;http://www.sitemaps.org/schemas/sitemap/0.9\&quot; xmlns:image=\&quot;http://www.google.com/schemas/sitemap-image/1.1\&quot; xmlns:video=\&quot;http://www.google.com/schemas/sitemap-video/1.1\&quot;&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/air-train&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/public-transportation&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/taxi-car-and-van-service&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/parking&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/pickup-and-dropoff&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/shops-restaurants-and-services&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/wifi-instructions&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/airport-maps&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/airport-hotels&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/on-airport-bus&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/accessibility-services&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/flight/airlines&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;/urlset&gt;\n&quot;,&quot;paramName&quot;:&quot;sitemap&quot;,&quot;paramShortDesc&quot;:&quot;A sitemap is an XML file that provides a structured list of all the important pages, images, videos, and other content on a website.&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aem_site_structure_creation_industry_based&quot;,&quot;commandName&quot;:&quot;aem_site_structure_creation_industry_based&quot;,&quot;shortDescription&quot;:&quot;Creating site structures in Adobe Experience Manager (AEM) from scratch, tailored for different AEM versions, archetypes and industry.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;MarTech&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Travel &amp; Hospitality&quot;,&quot;paramName&quot;:&quot;industry_level1&quot;,&quot;paramShortDesc&quot;:&quot;Represents the broader industry category to which the website belongs&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot; Airlines &amp; Airports&quot;,&quot;paramName&quot;:&quot;industry_level2&quot;,&quot;paramShortDesc&quot;:&quot;Specifies a more focused segment within the broader industry category&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;jfkairport&quot;,&quot;paramName&quot;:&quot;clientName&quot;,&quot;paramShortDesc&quot;:&quot;The name of the client or the project for which the AEM structure is being developed&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;&lt;urlset xmlns=\&quot;http://www.sitemaps.org/schemas/sitemap/0.9\&quot; xmlns:image=\&quot;http://www.google.com/schemas/sitemap-image/1.1\&quot; xmlns:video=\&quot;http://www.google.com/schemas/sitemap-video/1.1\&quot;&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/air-train&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/public-transportation&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/taxi-car-and-van-service&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/parking&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/to-from-airport/pickup-and-dropoff&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/shops-restaurants-and-services&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/wifi-instructions&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/airport-maps&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/airport-hotels&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/on-airport-bus&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/at-airport/accessibility-services&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;url&gt;\n\n&lt;loc&gt;https://www.jfkairport.com/flight/airlines&lt;/loc&gt;\n\n&lt;/url&gt;\n\n&lt;/urlset&gt;&quot;,&quot;paramName&quot;:&quot;sitemap&quot;,&quot;paramShortDesc&quot;:&quot;Represents the XML sitemap of the website, which lists all the URLs that are part of the website structure&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;coral_2_to_coral_3_dialog_conversion_to_support_aem_cloud_migration&quot;,&quot;commandName&quot;:&quot;aem_on_prem_to_aem_as_cloud_service_migration_coral_2_to_coral_3_dialog_conversion&quot;,&quot;shortDescription&quot;:&quot;Coral 2 to Coral 3 dialog conversion to support AEM as Cloud Service Migration for AEM projects&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;MarTech&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&lt;jcr:root\nxmlns:sling=\&quot;http://sling.apache.org/jcr/sling/1.0\&quot;\nxmlns:jcr=\&quot;http://www.jcp.org/jcr/1.0\&quot;\njcr:primaryType=\&quot;cq:Dialog\&quot;\nsling:resourceType=\&quot;cq/gui/components/authoring/dialog\&quot;&gt;\n\n&lt;content\njcr:primaryType=\&quot;nt:unstructured\&quot;\nsling:resourceType=\&quot;granite/ui/components/foundation/container\&quot;&gt;\n\n&lt;items jcr:primaryType=\&quot;nt:unstructured\&quot;&gt;\n&lt;textfield\njcr:primaryType=\&quot;nt:unstructured\&quot;\nsling:resourceType=\&quot;granite/ui/components/foundation/textfield\&quot;\nfieldLabel=\&quot;Example Field\&quot;\nname=\&quot;./exampleField\&quot;/&gt;\n&lt;/items&gt;\n&lt;/content&gt;\n&lt;/jcr:root&gt;&quot;,&quot;paramName&quot;:&quot;selectedCode&quot;,&quot;paramShortDesc&quot;:&quot;The XML file containing content to be converted from Coral 2 to Coral 3 UI fields&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aem_backend_osgi_configuration_refactoring&quot;,&quot;commandName&quot;:&quot;aem_backend_osgi_configuration_refactoring&quot;,&quot;shortDescription&quot;:&quot;OSGI Configuration Refactoring the code to support AEM as Cloud Service Migration for AEM projects&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;MarTech&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&lt;jcr:root xmlns:sling=\&quot;http://sling.apache.org/jcr/sling/1.0\&quot;\n    xmlns:jcr=\&quot;http://www.jcp.org/jcr/1.0\&quot; jcr:primaryType=\&quot;sling:OsgiConfig\&quot;\n    org.apache.sling.commons.log.file=\&quot;logs/error.log\&quot;\n    org.apache.sling.commons.log.level=\&quot;debug\&quot;\n    org.apache.sling.commons.log.names=\&quot;[com.adobe.aem.guides.wknd]\&quot;\n    org.apache.sling.commons.log.pattern=\&quot;\\{0,date,dd.MM.yyyy HH:mm:ss.SSS} *{4}* [{2}] {3} {5}\&quot; /&gt;\n\n&quot;,&quot;paramName&quot;:&quot;selectedCode&quot;,&quot;paramShortDesc&quot;:&quot;osgi xml code&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aem_on_prem_to_cloud_service_migration_oak_index_conversion&quot;,&quot;commandName&quot;:&quot;aem_backend_oak_index_conversion_refactoring&quot;,&quot;shortDescription&quot;:&quot;OAK index Conversion to support AEM as Cloud Service Migration for AEM projects&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;MarTech&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&lt;jcr:root xmlns:oak=\&quot;http://jackrabbit.apache.org/oak/ns/1.0\&quot; xmlns:jcr=\&quot;http://www.jcp.org/jcr/1.0\&quot; xmlns:nt=\&quot;http://www.jcp.org/jcr/nt/1.0\&quot;\n    jcr:primaryType=\&quot;oak:Unstructured\&quot;\n    async=\&quot;[async]\&quot;\n    compatVersion=\&quot;{Long}2\&quot;\n    evaluatePathRestrictions=\&quot;{Boolean}true\&quot;\n    includedPaths=\&quot;[/content/abc/en]\&quot;\n    queryPaths=\&quot;[/content/abc/en]\&quot;\n    refresh=\&quot;{Boolean}true\&quot;\n    reindex=\&quot;{Boolean}false\&quot;\n    tags=\&quot;[slingSitemaps]\&quot;\n    type=\&quot;lucene\&quot;&gt;\n    &lt;indexRules jcr:primaryType=\&quot;nt:unstructured\&quot;&gt;\n        &lt;nt:base jcr:primaryType=\&quot;nt:unstructured\&quot;&gt;\n            &lt;properties jcr:primaryType=\&quot;nt:unstructured\&quot;&gt;\n                &lt;sitemapRoot\n                    jcr:primaryType=\&quot;nt:unstructured\&quot;\n                    name=\&quot;sling:sitemapRoot\&quot;\n                    propertyIndex=\&quot;{Boolean}true\&quot;/&gt;\n            &lt;/properties&gt;\n        &lt;/nt:base&gt;\n    &lt;/indexRules&gt;\n&lt;/jcr:root&gt;&quot;,&quot;paramName&quot;:&quot;selectedCode&quot;,&quot;paramShortDesc&quot;:&quot;oak index file content&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aem_on_prem_to_cloud_service_migration_backend_code_refactoring&quot;,&quot;commandName&quot;:&quot;aem_backend_code_refactoring&quot;,&quot;shortDescription&quot;:&quot;Refactoring the code to support AEM as Cloud Service Migration for AEM projects&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;MarTech&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;code snippet&quot;,&quot;paramName&quot;:&quot;selectedCode&quot;,&quot;paramShortDesc&quot;:&quot;code snippet&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;brd_to_functional_test_cases&quot;,&quot;commandName&quot;:&quot;brd_to_functional_test_cases&quot;,&quot;shortDescription&quot;:&quot;Convert business requirement into functional test scenarios&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Retail&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;Industry pertaining to the business requirement document&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;E-commerce Platform&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;Specific domain in industry for drafting test scenarios&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Contains details requirements for the project&quot;,&quot;paramName&quot;:&quot;BusinessRequirementDoc&quot;,&quot;paramShortDesc&quot;:&quot;Formal description of an upcoming project&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;brd_to_functional_test_case&quot;,&quot;commandName&quot;:&quot;brd_to_functional_test_case&quot;,&quot;shortDescription&quot;:&quot;BRD to functional test case&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;clientName&quot;,&quot;paramName&quot;:&quot;clientName&quot;,&quot;paramShortDesc&quot;:&quot;clientName&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Business requirement&quot;,&quot;paramName&quot;:&quot;BRD&quot;,&quot;paramShortDesc&quot;:&quot;BRD&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_playwright_test&quot;,&quot;commandName&quot;:&quot;requirement_to_playwright_test&quot;,&quot;shortDescription&quot;:&quot;Convert UI testing requirements into Playwright automation tests&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;E-Commerce&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;Industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Retail&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;Domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;JavaScript&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;Automation_framework_tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Open the URL: https://www.demoblaze.com/\n  - Click laptopLink\n  - Click selectProduct\n  - Click addToCart\n  - Click cartLink\n  - Click placeOrderBtn (add 2s wait)&quot;,&quot;paramName&quot;:&quot;FunctionalSpec&quot;,&quot;paramShortDesc&quot;:&quot;Functional specification of the service&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_jmeter_performance_test&quot;,&quot;commandName&quot;:&quot;requirement_to_jmeter_performance_test&quot;,&quot;shortDescription&quot;:&quot;Convert performance requirements into Jmeter Automation tests&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Sample collection.json from postman or similar tool&quot;,&quot;paramName&quot;:&quot;Context&quot;,&quot;paramShortDesc&quot;:&quot;Automation context for performance testing&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_karate_api_test&quot;,&quot;commandName&quot;:&quot;requirement_to_karate_api_test&quot;,&quot;shortDescription&quot;:&quot;Convert API spec and requirement into karate automation tests&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Retail&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;Industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;E-commerce&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;Domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Java&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;Tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;endpoint =  https://sampleapi.com/:\n1. Authentication\n- POST: /auth/login\n    - Request body:json {\&quot;username\&quot;: \&quot;mor_2314\&quot;,  \&quot;password\&quot;: \&quot;testpwd\&quot;}\n    - Check value of token is response is not null and Capture the token from the response and store it in the variable Auth_Token.\n\n2. Product Categories\n- GET: /products/categories\n    - Add header: Authorization: Bearer &lt;Auth_Token&gt;.\n    - Expected response:json\n    [\&quot;electronics\&quot;,\&quot;jewelery\&quot;,\&quot;men's clothing\&quot;,\&quot;women's clothing\&quot;]\n    - Verifications:\n      - Status code is 200 OK.\n      - The response contains the listed categories.&quot;,&quot;paramName&quot;:&quot;APISpec&quot;,&quot;paramShortDesc&quot;:&quot;Spec of API endpoints to craft test cases&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_desktop_automation_test&quot;,&quot;commandName&quot;:&quot;requirement_to_desktop_automation_test&quot;,&quot;shortDescription&quot;:&quot;Convert functional test requirements into Desktop automation tests&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Cucumber BDD format with WinAppDriver and Java&quot;,&quot;paramName&quot;:&quot;Automation_Format&quot;,&quot;paramShortDesc&quot;:&quot;Automation format to be used&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Cucumber &quot;,&quot;paramName&quot;:&quot;technology&quot;,&quot;paramShortDesc&quot;:&quot;technology/tools syntax used&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Feature: feature1\n    Scenario: scenario1\n    Scenario: scenario2\n    Scenario: scenario3&quot;,&quot;paramName&quot;:&quot;Context&quot;,&quot;paramShortDesc&quot;:&quot;Features and Scenarios to be considered&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_selenium_ui_test&quot;,&quot;commandName&quot;:&quot;requirement_to_selenium_ui_test&quot;,&quot;shortDescription&quot;:&quot;Selenium UI test\n\n&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;clientName&quot;,&quot;paramName&quot;:&quot;clientName&quot;,&quot;paramShortDesc&quot;:&quot;clientName&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;tech_stack&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;WDIO_To_Playwright_Test_Migration&quot;,&quot;commandName&quot;:&quot;WDIO_To_Playwright_Test_Migration&quot;,&quot;shortDescription&quot;:&quot;Test Migration&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;tech_stack&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_mobile_test&quot;,&quot;commandName&quot;:&quot;requirement_to_mobile_test&quot;,&quot;shortDescription&quot;:&quot;Convert functional test requirements into Mobile automation tests&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Appium, BDD, Cucumber with Java and Selenium&quot;,&quot;paramName&quot;:&quot;Automation_Format&quot;,&quot;paramShortDesc&quot;:&quot;Automation testing scripts format&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Gherkin&quot;,&quot;paramName&quot;:&quot;Technology&quot;,&quot;paramShortDesc&quot;:&quot;How the feature file has to be generated&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;examples like : @login Feature: Login Page (OTP-Based) \n    @positive Scenario: Successful login with valid OTP Given the user is on the login page When the user enters a valid phone number and requests an OTP And enters the received OTP And clicks the login button Then the user should be redirected to the dashboard \n    @negative Scenario: Login with invalid phone number Given the user is on the login page When the user enters an invalid phone number And requests an OTP Then the user should see an error message for invalid phone number \n    @negative Scenario: Login with incorrect OTP Given the user is on the login page When the user enters a valid phone number and requests an OTP And enters an incorrect OTP And clicks the login button Then the user should see an error message for invalid OTP\n    @edge Scenario: Login with expired OTP Given the user is on the login page When the user enters a valid phone number and requests an OTP And waits for the OTP to expire And enters the expired OTP And clicks the login button Then the user should see an error message for expired OTP &quot;,&quot;paramName&quot;:&quot;Context&quot;,&quot;paramShortDesc&quot;:&quot;Scenarios for testing already outlined&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;generate_test_strategy_from_project_context&quot;,&quot;commandName&quot;:&quot;generate_test_strategy_from_project_context&quot;,&quot;shortDescription&quot;:&quot;Generate test strategy from project context\n&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;clientName&quot;,&quot;paramName&quot;:&quot;clientName&quot;,&quot;paramShortDesc&quot;:&quot;clientName&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;tech_stack&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_gatling_performance_test&quot;,&quot;commandName&quot;:&quot;requirement_to_gatling_performance_test&quot;,&quot;shortDescription&quot;:&quot;Convert performance requirements into Gatling Automation tests&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Sample postman API collection.json or similar tools collection.json &quot;,&quot;paramName&quot;:&quot;Context&quot;,&quot;paramShortDesc&quot;:&quot;API collection for Performance Testing&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;axecore_validation&quot;,&quot;commandName&quot;:&quot;axecore_validation&quot;,&quot;shortDescription&quot;:&quot;Accessibility testing on web applications using AxeCore&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;(A, AA, AAA compliance levels)&quot;,&quot;paramName&quot;:&quot;WCAG_Standards&quot;,&quot;paramShortDesc&quot;:&quot;WCAG_Standards&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Selenium/WebDriverIO/Playwright&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;rest_assured_to_karate_migration&quot;,&quot;commandName&quot;:&quot;rest_assured_to_karate_migration&quot;,&quot;shortDescription&quot;:&quot;Migrate Rest Assured to Karate.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;@BeforeAll\n    public static void setup() {\n        RestAssured.baseURI = \&quot;https://jsonplaceholder.typicode.com\&quot;;\n    }\n\n    @Test\n    public void getRequest() {\n        Response response = given()\n                .contentType(ContentType.JSON)\n                .when()\n                .get(\&quot;/posts\&quot;)\n                .then()\n                .extract().response();\n\n        Assertions.assertEquals(200, response.statusCode());\n        Assertions.assertEquals(\&quot;qui est esse\&quot;, response.jsonPath().getString(\&quot;title[1]\&quot;));\n    }&quot;,&quot;paramName&quot;:&quot;automation_content&quot;,&quot;paramShortDesc&quot;:&quot;REST-Assured Test&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;broken_link_validation&quot;,&quot;commandName&quot;:&quot;broken_link_validation&quot;,&quot;shortDescription&quot;:&quot;To validate that all hyperlinks, media links, and navigation routes within the application (internal and external) are not broken , do not return HTTP 4xx/5xx errors , and adhere to redirect or security rules if applicable&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;https://example.com&quot;,&quot;paramName&quot;:&quot;input_url&quot;,&quot;paramShortDesc&quot;:&quot;base url of the application&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Full site crawl or limited to key flows/templates&quot;,&quot;paramName&quot;:&quot;page_scope&quot;,&quot;paramShortDesc&quot;:&quot;Full site crawl or limited to key flows/templates&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Yes/No — if yes, provide login flow or token setup&quot;,&quot;paramName&quot;:&quot;auth_needed&quot;,&quot;paramShortDesc&quot;:&quot;Yes/No — if yes, provide login flow or token setup&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Anchor links, image links, media embeds, external references&quot;,&quot;paramName&quot;:&quot;link_type&quot;,&quot;paramShortDesc&quot;:&quot;Anchor links, image links, media embeds, external references&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;5 seconds per request&quot;,&quot;paramName&quot;:&quot;set_timeout_limit&quot;,&quot;paramShortDesc&quot;:&quot;enter timeout limit&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;eg. 3 levels&quot;,&quot;paramName&quot;:&quot;page_level&quot;,&quot;paramShortDesc&quot;:&quot;how many internal sitemap level it will navigate&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Selenium + Java/Python + `HttpURLConnection` or Apache HTTP client , playwright, Webdriver IO, Cypress&quot;,&quot;paramName&quot;:&quot;automation_framework&quot;,&quot;paramShortDesc&quot;:&quot;Selenium + Java/Python + `HttpURLConnection` or Apache HTTP client , playwright, Webdriver IO, Cypress&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Follow, fail, or log redirects&quot;,&quot;paramName&quot;:&quot;expected_redirect&quot;,&quot;paramShortDesc&quot;:&quot;Follow, fail, or log redirects&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;locust_curl_load_testing&quot;,&quot;commandName&quot;:&quot;locust_curl_load_testing&quot;,&quot;shortDescription&quot;:&quot;Create Load test script using Locust for specific curl&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Curl&quot;,&quot;paramName&quot;:&quot;Curl&quot;,&quot;paramShortDesc&quot;:&quot;Curl&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;dynamic_application_security_testing&quot;,&quot;commandName&quot;:&quot;dynamic_application_security_testing&quot;,&quot;shortDescription&quot;:&quot;Dynamic Application Security Testing&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;https://app.example.com&quot;,&quot;paramName&quot;:&quot;application_url&quot;,&quot;paramShortDesc&quot;:&quot;application_url&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Angular + Spring Boot&quot;,&quot;paramName&quot;:&quot;application_tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;application_tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;REST/GraphQL&quot;,&quot;paramName&quot;:&quot;api_tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;api_tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;https://api.example.com/v3&quot;,&quot;paramName&quot;:&quot;api_base_url&quot;,&quot;paramShortDesc&quot;:&quot;api_base_url&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;generate_end_of_test_report&quot;,&quot;commandName&quot;:&quot;generate_end_of_test_report&quot;,&quot;shortDescription&quot;:&quot;Generate end of testing report from project context&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;finance&quot;,&quot;paramName&quot;:&quot;Industry&quot;,&quot;paramShortDesc&quot;:&quot;Industry name&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;abc&quot;,&quot;paramName&quot;:&quot;Client&quot;,&quot;paramShortDesc&quot;:&quot;Name of client&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;sample template&quot;,&quot;paramName&quot;:&quot;sample_template&quot;,&quot;paramShortDesc&quot;:&quot;template for Defect summary reporting\nTest execution dashboards\nTraceability and coverage analysis&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;static_application_security_testing&quot;,&quot;commandName&quot;:&quot;static_application_security_testing&quot;,&quot;shortDescription&quot;:&quot;Static Application Security Testing&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;SonarQube, Checkmarx, Veracode, Fortify, Snyk&quot;,&quot;paramName&quot;:&quot;tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;generate_test_plan&quot;,&quot;commandName&quot;:&quot;generate_test_plan&quot;,&quot;shortDescription&quot;:&quot;Generate test plan from project context&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;Industry&quot;,&quot;paramShortDesc&quot;:&quot;Finance&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;Create_POM_File_Automation&quot;,&quot;commandName&quot;:&quot;Create_POM_File_Automation&quot;,&quot;shortDescription&quot;:&quot;Create Page Object Model (POM) file based on the provided HTML DOM structure.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;programming language&quot;,&quot;paramName&quot;:&quot;programming_language&quot;,&quot;paramShortDesc&quot;:&quot;Python&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;automation tech stack&quot;,&quot;paramName&quot;:&quot;automation_tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;Selenium&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;Playwright_lighthouse_automation_script&quot;,&quot;commandName&quot;:&quot;Playwright_lighthouse_automation_script&quot;,&quot;shortDescription&quot;:&quot;generate a Lighthouse-based performance testing script that can be integrated with Playwright &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;URLs_audit&quot;,&quot;paramName&quot;:&quot;URLs_audit&quot;,&quot;paramShortDesc&quot;:&quot;URLs_audit&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;reports_path&quot;,&quot;paramName&quot;:&quot;reports_path&quot;,&quot;paramShortDesc&quot;:&quot;reports_path&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Performance&quot;,&quot;paramName&quot;:&quot;AuditCategories&quot;,&quot;paramShortDesc&quot;:&quot;Performance&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;verify_broken_images&quot;,&quot;commandName&quot;:&quot;verify_broken_images&quot;,&quot;shortDescription&quot;:&quot;Broken Image Validation for multiple Pages.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Selenium, Cypress, WebDriverIO, Playwright&quot;,&quot;paramName&quot;:&quot;Test_Automation_Framework&quot;,&quot;paramShortDesc&quot;:&quot;Selenium, Cypress, WebDriverIO, Playwright&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_database_test&quot;,&quot;commandName&quot;:&quot;requirement_to_database_test&quot;,&quot;shortDescription&quot;:&quot;Convert Database test requirements into automation tests.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Postgres&quot;,&quot;paramName&quot;:&quot;database&quot;,&quot;paramShortDesc&quot;:&quot;Database to be tested&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Java JDBC connection, Hibernate&quot;,&quot;paramName&quot;:&quot;db_connection_type&quot;,&quot;paramShortDesc&quot;:&quot;Connection type &quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Karate testing framework&quot;,&quot;paramName&quot;:&quot;db_testing_framework&quot;,&quot;paramShortDesc&quot;:&quot;Testing framework &quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;- for postgres db with connection ulr at localhost:5672 and user name postgres with password postgres\n- validate the count of all employees with age between 25 and 30 for employee table&quot;,&quot;paramName&quot;:&quot;context&quot;,&quot;paramShortDesc&quot;:&quot;scenario for automation testing &quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_rest_assured_test&quot;,&quot;commandName&quot;:&quot;requirement_to_rest_assured_test&quot;,&quot;shortDescription&quot;:&quot;Rest Assured Testing&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;JUnit/TestNG&quot;,&quot;paramName&quot;:&quot;Testing_Framework&quot;,&quot;paramShortDesc&quot;:&quot;Testing Framework&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;postman collection or Api details &quot;,&quot;paramName&quot;:&quot;automation_content&quot;,&quot;paramShortDesc&quot;:&quot;automation content for Api Testing &quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;chaos_testing_testcase_generation&quot;,&quot;commandName&quot;:&quot;chaos_testing_testcase_generation&quot;,&quot;shortDescription&quot;:&quot;Chaos Testing scenario generation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;infra_stack&quot;,&quot;paramName&quot;:&quot;infra_stack&quot;,&quot;paramShortDesc&quot;:&quot;infra_stack&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;project_infra_Architecture&quot;,&quot;paramName&quot;:&quot;project_infra_Architecture&quot;,&quot;paramShortDesc&quot;:&quot;project_infra_Architecture&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_webdriver_io_ui&quot;,&quot;commandName&quot;:&quot;requirement_to_webdriver_io_ui&quot;,&quot;shortDescription&quot;:&quot;Webdriver IO Ui automation &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Open the URL: https://www.demoblaze.com/\n  - Click laptopLink\n  - Click selectProduct\n  - Click addToCart\n  - Click cartLink\n  - Click placeOrderBtn (add 2s wait)&quot;,&quot;paramName&quot;:&quot;automation_content&quot;,&quot;paramShortDesc&quot;:&quot;Functional specification of the service&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;testcase_generation_jira_stories&quot;,&quot;commandName&quot;:&quot;testcase_generation_jira_stories&quot;,&quot;shortDescription&quot;:&quot;Prompts for Test case generation from JIRA stories&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Trading&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;Trading&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Trading&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;Trading&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Selenium&quot;,&quot;paramName&quot;:&quot;automation_tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;Selenium&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;cross_browser_testing&quot;,&quot;commandName&quot;:&quot;cross_browser_testing&quot;,&quot;shortDescription&quot;:&quot;Cross-Browser Testing Strategy and Quality Assurance for Multi-Platform Compatibility.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Selenium, Cypress, Playwright, Appium, etc.&quot;,&quot;paramName&quot;:&quot;testing_framework&quot;,&quot;paramShortDesc&quot;:&quot;Selenium, Cypress, Playwright, Appium, etc.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Chrome, Firefox, Safari, Edge, Chromium&quot;,&quot;paramName&quot;:&quot;browser_list&quot;,&quot;paramShortDesc&quot;:&quot;Chrome, Firefox, Safari, Edge, Chromium&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Selenium Grid (Dockerized or cloud-managed)\n\nBrowserStack / SauceLabs integrations\n\nCypress Cross-Browser Testing (with Chrome, Firefox, Edge)\n\nPlaywright's native cross-browser support\n\nTestNG or JUnit Parameterization\n\nEnvironment-specific configuration management (JSON/YAML/properties)&quot;,&quot;paramName&quot;:&quot;execution_environment&quot;,&quot;paramShortDesc&quot;:&quot;Selenium Grid (Dockerized or cloud-managed)\n\nBrowserStack / SauceLabs integrations\n\nCypress Cross-Browser Testing (with Chrome, Firefox, Edge)\n\nPlaywright's native cross-browser support\n\nTestNG or JUnit Parameterization\n\nEnvironment-specific configuration management (JSON/YAML/properties)&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;testng_parallel_runner&quot;,&quot;commandName&quot;:&quot;testng_parallel_runner&quot;,&quot;shortDescription&quot;:&quot;TestNG Framework Setup for Parallel Execution&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Selenium Grid, BrowserStack, or SauceLabs&quot;,&quot;paramName&quot;:&quot;remote_env&quot;,&quot;paramShortDesc&quot;:&quot;Selenium Grid, BrowserStack, or SauceLabs&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;junit_parallel_execution&quot;,&quot;commandName&quot;:&quot;junit_parallel_execution&quot;,&quot;shortDescription&quot;:&quot;Parallel execution in a JUnit-based test automation framework&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Selenium, RestAssured&quot;,&quot;paramName&quot;:&quot;test_framework&quot;,&quot;paramShortDesc&quot;:&quot;Selenium, RestAssured, etc.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;local systems, Dockerized Grids, and cloud services (BrowserStack, SauceLabs)&quot;,&quot;paramName&quot;:&quot;execution_environment&quot;,&quot;paramShortDesc&quot;:&quot;local systems, Dockerized Grids, and cloud services (BrowserStack, SauceLabs)&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aem_requirement_to_testcase&quot;,&quot;commandName&quot;:&quot;aem_requirement_to_testcase&quot;,&quot;shortDescription&quot;:&quot;Generate BDD-style Gherkin test scenarios for an AEM Component &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Eg: C59D-Compare, CFM-Exterior Section, C01-Header&quot;,&quot;paramName&quot;:&quot;componentName&quot;,&quot;paramShortDesc&quot;:&quot;Name of the component/content fragment&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Eg: This component is used to author username and login field in Amazon login feature.&quot;,&quot;paramName&quot;:&quot;componentDescription&quot;,&quot;paramShortDesc&quot;:&quot;Provide a brief summary of the component like what this component used for, what features it supports, how it's used in E2E journeys&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Is it a content fragment, editable component, standalone component? Any authoring restrictions?&quot;,&quot;paramName&quot;:&quot;componentType&quot;,&quot;paramShortDesc&quot;:&quot;Is it a content fragment, editable component, standalone component? Any authoring restrictions?&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Eg: T01-Editorial template, T02-LoginPageTemplate etc&quot;,&quot;paramName&quot;:&quot;supportedTemplates&quot;,&quot;paramShortDesc&quot;:&quot;List of templates on which this component is supported.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Component screenshot or Wireframe if available&quot;,&quot;paramName&quot;:&quot;componentScreenshot&quot;,&quot;paramShortDesc&quot;:&quot;Component screenshot or Wireframe if available&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Details of all the fields in dialog\n\nField Label -Example Field\nType - Textfield\nMandatory (Y/N) - N \nDefault Value - \nPlaceholder Text - Any placeholder text\nHelp Text - Related help text of the field\nSpecial Rules/Notes - Any special condition like, if field is authored show one more field&quot;,&quot;paramName&quot;:&quot;dialogDetails&quot;,&quot;paramShortDesc&quot;:&quot;Details of all the fields in dialog\n\nField Label -Example Field\nType - Textfield\nMandatory (Y/N) - N \nDefault Value - \nPlaceholder Text - Any placeholder text\nHelp Text - Related help text of the field\nSpecial Rules/Notes - Any special condition like, if field is authored show one more field&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Eg: AC1:// Validate that the content author is able to create/edit the content fragment model for the exterior section of the car configurator Given I am a content author setting up a car configurator for a model And I navigate to Touch UI author instance - Assets &gt; Files &gt; {brand} &gt; {market} &gt; content-fragments When I want to create a new content fragment /component model for the exterior section of car configurator Then Clicking on 'Create Content Fragment' should show me an option to create a content fragment model 'CFM - Configurator Exterior Section'\n\nAnd Selecting to create 'CFM - Configurator Exterior Section' should show me the following options: · the Title of the content fragment (mandatory) · the Description of the content fragment (optional) And Clicking on 'Create' should allow me to save the changes and create a new content fragment model for the exterior section of the configurator And I should be able to later edit the content fragment model to change/modify the title and description if needed and save the changes AC2:// Validate the 'CFM - Configurator Exterior Section' content fragment model Given I am a content author setting up the exterior section content fragment model for configurator And I navigate to Touch UI author instance - Assets &gt; Files &gt; {brand} &gt; {market} &gt; content-fragments When I edit the content fragment model 'CFM - Configurator Exterior Section', I should see the dialog and should be able to author all the fields as per Dialog definition provided.&quot;,&quot;paramName&quot;:&quot;acceptanceCriteria&quot;,&quot;paramShortDesc&quot;:&quot;Acceptance criteria’s for the component&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;testcase_from_confluence_requirements&quot;,&quot;commandName&quot;:&quot;testcase_from_confluence_requirements&quot;,&quot;shortDescription&quot;:&quot;Generate Specific type of test cases from requirements on confluence &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Banking&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Finance&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;confluence_link&quot;,&quot;paramName&quot;:&quot;confluence_link&quot;,&quot;paramShortDesc&quot;:&quot;confluence_link&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Java&quot;,&quot;paramName&quot;:&quot;programming_language&quot;,&quot;paramShortDesc&quot;:&quot;programming_language&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;selenium&quot;,&quot;paramName&quot;:&quot;automation_tech_stack&quot;,&quot;paramShortDesc&quot;:&quot;automation_tech_stack&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Negative&quot;,&quot;paramName&quot;:&quot;test_cases_type&quot;,&quot;paramShortDesc&quot;:&quot;test_cases_type&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_test_cases&quot;,&quot;commandName&quot;:&quot;requirement_to_test_cases&quot;,&quot;shortDescription&quot;:&quot; UI Functional test case creation for different scenarios.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Eg: As a front end user I should be able to see the exterior section with exterior colour choices so that I can choose them for my configuration&quot;,&quot;paramName&quot;:&quot;storyContext&quot;,&quot;paramShortDesc&quot;:&quot;Share brief description of story or epic&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Eg: AC1: AC description Given When Then&quot;,&quot;paramName&quot;:&quot;acceptanceCriteria&quot;,&quot;paramShortDesc&quot;:&quot;Share acceptance criteria from the story or epic&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Attach screenshots showing the UI for different states or use cases&quot;,&quot;paramName&quot;:&quot;appScreenshot&quot;,&quot;paramShortDesc&quot;:&quot;Attach screenshots showing the UI for different states or use cases&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Eg: 1. Data pre-requisites – Exterior color should be available for the model&quot;,&quot;paramName&quot;:&quot;additionalConditions&quot;,&quot;paramShortDesc&quot;:&quot;Specify any additional conditions that impact the flow, such as authentication, data pre-requisites, integration behavior, etc.&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Eg: Attach confluence/story links from Jira/Confluence where FDs or SDs are documented.&quot;,&quot;paramName&quot;:&quot;additionalReference&quot;,&quot;paramShortDesc&quot;:&quot;Include links to functional designs, solution documents, existing similar functionality for deeper context&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_mobile_webdriver_io&quot;,&quot;commandName&quot;:&quot;requirement_to_mobile_webdriver_io&quot;,&quot;shortDescription&quot;:&quot;Automation for mobile applications using WebDriverIO with Appium.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Test Scenario: Mobile Shopping App\nLaunch the Demo Mobile App.\nClick on the \&quot;Shop\&quot; tab.\nScroll down and select a product.\nClick \&quot;Add to Cart\&quot;.\nNavigate to the Cart and verify the item.\nClick \&quot;Checkout\&quot; and complete the purchase flow.&quot;,&quot;paramName&quot;:&quot;automation_content&quot;,&quot;paramShortDesc&quot;:&quot;Functional specification of the service&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;requirement_to_ui_cypress&quot;,&quot;commandName&quot;:&quot;requirement_to_ui_cypress&quot;,&quot;shortDescription&quot;:&quot;web application automation using Cypress with Cucumber BDD&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Feature: Login Functionality\n\n  Scenario: Valid user should be able to log in\n    Given I open the login page\n    When I enter valid credentials\n    And I click on the login button\n    Then I should be redirected to the dashboard\n    And I should see a welcome message&quot;,&quot;paramName&quot;:&quot;automation_content&quot;,&quot;paramShortDesc&quot;:&quot;automation_content&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;testcase_creation_data_migration_testing&quot;,&quot;commandName&quot;:&quot;testcase_creation_data_migration_testing&quot;,&quot;shortDescription&quot;:&quot;Test case generation for data migration from one database to another,&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;SourceDBType&quot;,&quot;paramName&quot;:&quot;SourceDBType&quot;,&quot;paramShortDesc&quot;:&quot;SourceDBType&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;TargetDBType&quot;,&quot;paramName&quot;:&quot;TargetDBType&quot;,&quot;paramShortDesc&quot;:&quot;TargetDBType&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;industry&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;industry&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;domain&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;domain&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;browserstack_config_generation&quot;,&quot;commandName&quot;:&quot;browserstack_config_generation&quot;,&quot;shortDescription&quot;:&quot;BrowserStack Config Generation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Java/JSON/JavaScript&quot;,&quot;paramName&quot;:&quot;output_format&quot;,&quot;paramShortDesc&quot;:&quot;Java/JSON/JavaScript&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Chrome, Firefox, Safari, Edge&quot;,&quot;paramName&quot;:&quot;browser_type&quot;,&quot;paramShortDesc&quot;:&quot;Chrome, Firefox, Safari, Edge&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;iOS/Android, real and simulated&quot;,&quot;paramName&quot;:&quot;mobile_type&quot;,&quot;paramShortDesc&quot;:&quot;iOS/Android, real and simulated&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Selenium or Playwright&quot;,&quot;paramName&quot;:&quot;test_framework&quot;,&quot;paramShortDesc&quot;:&quot;Selenium or Playwright&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;defect_summary_from_defect_dump&quot;,&quot;commandName&quot;:&quot;defect_summary_from_defect_dump&quot;,&quot;shortDescription&quot;:&quot;Generate detailed defect summary report from defect dump&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Finance&quot;,&quot;paramName&quot;:&quot;industry&quot;,&quot;paramShortDesc&quot;:&quot;Finance&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;banking&quot;,&quot;paramName&quot;:&quot;domain&quot;,&quot;paramShortDesc&quot;:&quot;banking&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;DefectDump&quot;,&quot;paramName&quot;:&quot;DefectDump&quot;,&quot;paramShortDesc&quot;:&quot;DefectDump&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;uat&quot;,&quot;paramName&quot;:&quot;TestPhase&quot;,&quot;paramShortDesc&quot;:&quot;UAT&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;sauce_config_generation&quot;,&quot;commandName&quot;:&quot;sauce_config_generation&quot;,&quot;shortDescription&quot;:&quot;Sauce labs Config Generation\n\n&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;Java/JSON/JavaScript&quot;,&quot;paramName&quot;:&quot;output_format&quot;,&quot;paramShortDesc&quot;:&quot;Java/JSON/JavaScript&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Selenium or Playwright&quot;,&quot;paramName&quot;:&quot;test_framework&quot;,&quot;paramShortDesc&quot;:&quot;Selenium or Playwright&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Chrome, Firefox, Safari, Edge&quot;,&quot;paramName&quot;:&quot;browser_type&quot;,&quot;paramShortDesc&quot;:&quot;Chrome, Firefox, Safari, Edge&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;iOS/Android, real and simulated&quot;,&quot;paramName&quot;:&quot;mobile_type&quot;,&quot;paramShortDesc&quot;:&quot;iOS/Android, real and simulated&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;Automation_pipeline_GitHub_Action&quot;,&quot;commandName&quot;:&quot;Automation_pipeline_GitHub_Action&quot;,&quot;shortDescription&quot;:&quot;Create API regression pipeline for GitHub actions&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;API Regression CI&quot;,&quot;paramName&quot;:&quot;workflow_name&quot;,&quot;paramShortDesc&quot;:&quot;API Regression CI&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Python 3&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;Python 3&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Behave –tags @regression&quot;,&quot;paramName&quot;:&quot;test_command&quot;,&quot;paramShortDesc&quot;:&quot;Behave –tags @regression&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Allure&quot;,&quot;paramName&quot;:&quot;report_type&quot;,&quot;paramShortDesc&quot;:&quot;Allure&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;api-report&quot;,&quot;paramName&quot;:&quot;report_artifact_name&quot;,&quot;paramShortDesc&quot;:&quot;api-report&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Yes&quot;,&quot;paramName&quot;:&quot;enable_schedule&quot;,&quot;paramShortDesc&quot;:&quot;Yes&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;\t\n0 0 * * 0&quot;,&quot;paramName&quot;:&quot;schedule_cron&quot;,&quot;paramShortDesc&quot;:&quot;\t\n0 0 * * 0&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;FS_QE_KPI&quot;,&quot;commandName&quot;:&quot;FS_QE_KPI&quot;,&quot;shortDescription&quot;:&quot;Design a comprehensive dashboard of Key Process Indicators (KPIs) for Quality Assurance deliverables&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;creative_testing&quot;,&quot;commandName&quot;:&quot;creative_testing&quot;,&quot;shortDescription&quot;:&quot;To automate creative validation and responsive behavior testing across breakpoints for a web application\n&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;C01-Header&quot;,&quot;paramName&quot;:&quot;Component_Name&quot;,&quot;paramShortDesc&quot;:&quot;Name of the UI component or full page to test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;https://www.figma.com/file/abc123/header-design-mobile-desktop&quot;,&quot;paramName&quot;:&quot;design_url&quot;,&quot;paramShortDesc&quot;:&quot;Figma, Zeplin, or screenshot reference for layout comparison&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Chrome, Firefox&quot;,&quot;paramName&quot;:&quot;Browser&quot;,&quot;paramShortDesc&quot;:&quot;Target browsers (Chrome, Firefox, Safari, Edge)&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Default, hover, focus&quot;,&quot;paramName&quot;:&quot;state_to_validate&quot;,&quot;paramShortDesc&quot;:&quot;e.g. Default, hover, active, focus, disabled, error&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;Short text (\&quot;Home\&quot;), long text (\&quot;Welcome to the Global Publicis Sapient Experience Portal\&quot;)&quot;,&quot;paramName&quot;:&quot;content_varient&quot;,&quot;paramShortDesc&quot;:&quot;Test with short, long, and edge-case content strings&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;320px (mobile), 768px (tablet), 1024px (desktop), 1440px (large desktop)&quot;,&quot;paramName&quot;:&quot;breakpoints&quot;,&quot;paramShortDesc&quot;:&quot;List of screen sizes (e.g., 320px, 768px, 1024px, 1440px)&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;ARIA label present, minimum contrast 4.5:1, keyboard focusable&quot;,&quot;paramName&quot;:&quot;accessibility_rules&quot;,&quot;paramShortDesc&quot;:&quot;Expected ARIA roles, contrast ratio, keyboard navigability&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;FS_Prod_Support_Process&quot;,&quot;commandName&quot;:&quot;FS_Prod_Support_Process&quot;,&quot;shortDescription&quot;:&quot;design a comprehensive LIVE Environment Support Operating Procedure for a high-complexity trading compliance application&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;FS_UserAcceptance_TradeCompliance&quot;,&quot;commandName&quot;:&quot;FS_UserAcceptance_TradeCompliance&quot;,&quot;shortDescription&quot;:&quot;Define comprehensive User Acceptance Criteria (UAC) for trade compliance across all asset types and money market instruments.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;FS_Test_Case_AccEngine_Record&quot;,&quot;commandName&quot;:&quot;FS_Test_Case_AccEngine_Record&quot;,&quot;shortDescription&quot;:&quot;Design test cases for Validating real-time Accounting Engine Distribution Record&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;Testdata_hospital_appointment_booking&quot;,&quot;commandName&quot;:&quot;Testdata_hospital_appointment_booking&quot;,&quot;shortDescription&quot;:&quot;Hospital Appointment Booking System - Test Data Generation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;number&quot;,&quot;paramName&quot;:&quot;count&quot;,&quot;paramShortDesc&quot;:&quot;count of test data&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;FS_Test_Estimation&quot;,&quot;commandName&quot;:&quot;FS_Test_Estimation&quot;,&quot;shortDescription&quot;:&quot;Design a comprehensive test estimation framework for Financial Services/Asset Management trading front office application&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;Retail_TestScen_PaymentGateway&quot;,&quot;commandName&quot;:&quot;Retail_TestScen_PaymentGateway&quot;,&quot;shortDescription&quot;:&quot;Test scenarios to validate the integrated payment gateway&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;RetailBanking_Current_Saving_Acc_Negative_Scn&quot;,&quot;commandName&quot;:&quot;RetailBanking_Current_Saving_Acc_Negative_Scn&quot;,&quot;shortDescription&quot;:&quot;Design negative test scenarios to validate 'Current' and 'Savings' account journeys&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;Energy_TestScen_BulkUpload_price&quot;,&quot;commandName&quot;:&quot;Energy_TestScen_BulkUpload_price&quot;,&quot;shortDescription&quot;:&quot;Test cases for validating Bulk Upload functionality of Secondary Costs Prices via Excel integration.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;QE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_eks&quot;,&quot;commandName&quot;:&quot;aws_eks&quot;,&quot;shortDescription&quot;:&quot;prompt to create aws eks terraform module&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_vpc&quot;,&quot;commandName&quot;:&quot;aws_vpc&quot;,&quot;shortDescription&quot;:&quot;This prompt is to create a AWS VPC with public, private subnets, IG gateway, NAT gateway, route tables&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_dns_resolver&quot;,&quot;commandName&quot;:&quot;aws_dns_resolver&quot;,&quot;shortDescription&quot;:&quot;aws_dns_resolver&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_waf&quot;,&quot;commandName&quot;:&quot;aws_waf&quot;,&quot;shortDescription&quot;:&quot;prompt to generate aws waf terraform module &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_ec2_instance&quot;,&quot;commandName&quot;:&quot;aws_ec2_instance&quot;,&quot;shortDescription&quot;:&quot;This prompt is to create a AWS EC2 instance&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;vpc&quot;,&quot;commandName&quot;:&quot;aws vpc module&quot;,&quot;shortDescription&quot;:&quot;aws vpc&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_lambda&quot;,&quot;commandName&quot;:&quot;aws_lambda&quot;,&quot;shortDescription&quot;:&quot;This prompt will be used to create a serverless lambda function on AWS cloud platform.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;key&quot;,&quot;paramName&quot;:&quot;key&quot;,&quot;paramShortDesc&quot;:&quot;add a key&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;name&quot;,&quot;paramName&quot;:&quot;bucket&quot;,&quot;paramShortDesc&quot;:&quot;name of bucket&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;aws_elasticache&quot;,&quot;commandName&quot;:&quot;aws_elasticache&quot;,&quot;shortDescription&quot;:&quot;prompt for creating resuable aws elasticache terraform module &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_rds_multi_engine&quot;,&quot;commandName&quot;:&quot;aws_rds_multi_engine&quot;,&quot;shortDescription&quot;:&quot;prompt for creating reusable aws rds multi-engine terraform module&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_dynamodb&quot;,&quot;commandName&quot;:&quot;aws_dynamodb&quot;,&quot;shortDescription&quot;:&quot;prompt for creating reusable aws dynamodb terraform module&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_s3_bucket&quot;,&quot;commandName&quot;:&quot;aws_s3_bucket&quot;,&quot;shortDescription&quot;:&quot;Create a reusable Terraform module to provision an AWS S3 bucket. &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_efs&quot;,&quot;commandName&quot;:&quot;aws_efs&quot;,&quot;shortDescription&quot;:&quot;prompt for creating reusable aws  aws_efs terraform module&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;aws_rds&quot;,&quot;commandName&quot;:&quot;aws_rds&quot;,&quot;shortDescription&quot;:&quot;prompt for creating reusable aws terraform aws rds module&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;Cloud COE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_compare_build_tool&quot;,&quot;commandName&quot;:&quot;react_compare_build_tool&quot;,&quot;shortDescription&quot;:&quot;Research and Select the suitable build tool for the front end chat application&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_image_component_with_download_expand&quot;,&quot;commandName&quot;:&quot;react_image_component_with_download_expand_develop&quot;,&quot;shortDescription&quot;:&quot;To implement a image display component that should seamlessly download the image and should show the loader till the image downloaded. &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_typed_api_client_axios&quot;,&quot;commandName&quot;:&quot;react_typed_api_client_axios_develop&quot;,&quot;shortDescription&quot;:&quot;To implement an API client utility&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_http_streaming&quot;,&quot;commandName&quot;:&quot;react_http_streaming_develop&quot;,&quot;shortDescription&quot;:&quot;To implement HTTP real time streaming in react component&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_typed_file_input_component&quot;,&quot;commandName&quot;:&quot;react_typed_file_input_component_develop&quot;,&quot;shortDescription&quot;:&quot;The File Input component is designed to handle file selection with validation and user feedback through tooltips and error notifications. It should integrate with localization and state management for a seamless user experience.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_error_display_component&quot;,&quot;commandName&quot;:&quot;react_error_display_component_develop&quot;,&quot;shortDescription&quot;:&quot;To implement a reusable error component in React to display error messages&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_assess_state_management&quot;,&quot;commandName&quot;:&quot;react_assess_state_management_tool&quot;,&quot;shortDescription&quot;:&quot;Develop a framework to implement State management in React &quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_typed_locale_context&quot;,&quot;commandName&quot;:&quot;react_typed_locale_context_develop&quot;,&quot;shortDescription&quot;:&quot;To implement a localization in a front end application without using any third party libraries.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_typed_chat_Input_component&quot;,&quot;commandName&quot;:&quot;react_typed_chat_Input_component_develop&quot;,&quot;shortDescription&quot;:&quot;This will generate the  ChatTextInput component for a chat application, showcasing how to handle input changes, key events, and focus/blur events effectively.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_typed_chat_interface_component&quot;,&quot;commandName&quot;:&quot;react_typed_chat_interface_component_develop&quot;,&quot;shortDescription&quot;:&quot;The DefaultChatInterface offers a seamless chat experience with default prompts, message sending, and file upload alerts. It supports localization, theming, and state management for enhanced user interaction.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;python_auth_token_implementation&quot;,&quot;commandName&quot;:&quot;python_auth_token_implementation&quot;,&quot;shortDescription&quot;:&quot;Generate jwt token&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;python_auth_token_email_masking&quot;,&quot;commandName&quot;:&quot;python_auth_token_email_masking&quot;,&quot;shortDescription&quot;:&quot;Generate masked emails&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;react_accordion_component&quot;,&quot;commandName&quot;:&quot;react_accordion_component_develop&quot;,&quot;shortDescription&quot;:&quot;To implement a reusable Accordion component in React using typescript&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;python_vertexapi_send_message_api_streaming&quot;,&quot;commandName&quot;:&quot;python_vertexapi_send_message_api_streaming&quot;,&quot;shortDescription&quot;:&quot;Streaming of text generation&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;async def send_message_to_genai(\n        self,\n        conversation_id: int,\n        prompt: str,\n        file: bytes | None,\n        file_type: str | None,\n    ) -&gt; Tuple[str, int]:\n        \&quot;\&quot;\&quot;\n        Sends a message to the chatbot and handles exceptions.\n \n        Args:\n            conversation_id (int): The conversation ID.\n            query (str): The message to send to the GenAI.\n \n        Returns:\n            Tuple[str, int]: The response from the chatbot and the conversation ID.\n        \&quot;\&quot;\&quot;\n        try:\n            logger.info(\&quot;Sending message to AIChat\&quot;)\n            logger.info(\&quot;Setting model session\&quot;)\n            # await self.set_conversation(conversation_id, prompt)\n            logger.info(\&quot;Sending message to AIChat\&quot;)\n \n            if file is None or len(file) == 0:\n                picture_bytes = None\n                user_query = sql_models.Message(\n                    role=\&quot;user\&quot;, content=prompt, conversation_id=self.conversation_id\n                )\n            else:\n                picture_bytes = base64.b64decode(file)\n \n                mime_type = get_mime_type(file_type)\n \n                # Wrap the bytes in the expected object\n                image = ImageData(data=picture_bytes, mime_type=mime_type)\n                user_query = sql_models.Message(\n                    # The above code snippet in Python is creating a dictionary with the following\n                    # key-value pairs:\n                    # - \&quot;role\&quot;: \&quot;user\&quot;\n                    # - \&quot;content\&quot;: the value stored in the variable `prompt`\n                    # - \&quot;conversation_id\&quot;: the value stored in `self.conversation_id`\n                    # - \&quot;has_image\&quot;: True\n                    role=\&quot;user\&quot;,\n                    content=prompt,\n                    conversation_id=self.conversation_id,\n                    attachment_type=file_type,\n                )\n            await self.dbs.add_record(user_query)\n \n            p_content = Part.from_text(prompt)\n            f_content = Part.from_image(image) if picture_bytes is not None else None\n            res_prompt = Content(\n                role=\&quot;user\&quot;, parts=[p_content, f_content] if f_content else [p_content]\n            )\n \n            start_time = datetime.now()\n            response = self.chat_session.send_message(res_prompt)\n            end_time = datetime.now()\n \n            logger.info(\&quot;Time difference:%s\&quot;, (end_time - start_time))\n            logger.info(\&quot;Received response from AIChat - length %i\&quot;, len(response.text))\n \n            genai_response = sql_models.Message(\n                role=\&quot;assistant\&quot;,\n                content=response.text,\n                conversation_id=self.conversation_id,\n            )\n            await self.dbs.add_record(genai_response)\n            # Update the updated_at field for the conversation\n            await self.dbs.update_record(\n                sql_models.Conversation, conversation_id, {\&quot;updated_at\&quot;: datetime.now()}\n            )\n \n            logger.info(\&quot;Message sent to AIChat and response received\&quot;)\n            return response.text, self.conversation_id\n \n        except ResponseValidationError as exc:\n            logger.error(\&quot;Error sending message to AIChat: %s\&quot;, exc)\n            genai_err_response = sql_models.Message(\n                role=\&quot;assistant\&quot;,\n                content=\&quot;Sorry, I can't process your request right now. Please try again later. \\n If the problem persists, contact the system administrator.\&quot;,\n                conversation_id=self.conversation_id,\n            )\n            await self.dbs.add_record(genai_err_response)\n            return (\n                \&quot;Sorry, I can't process your request right now. Please try again later.\&quot;\n                \&quot;If the problem persists, contact the system administrator.\&quot;\n            ), 0&quot;,&quot;paramName&quot;:&quot;application_code&quot;,&quot;paramShortDesc&quot;:&quot;async def send_message_to_genai(\n        self,\n        conversation_id: int,\n        prompt: str,\n        file: bytes | None,\n        file_type: str | None,\n    ) -&gt; Tuple[str, int]:\n        \&quot;\&quot;\&quot;\n        Sends a message to the chatbot and handles exceptions.\n \n        Args:\n            conversation_id (int): The conversation ID.\n            query (str): The message to send to the GenAI.\n \n        Returns:\n            Tuple[str, int]: The response from the chatbot and the conversation ID.\n        \&quot;\&quot;\&quot;\n        try:\n            logger.info(\&quot;Sending message to AIChat\&quot;)\n            logger.info(\&quot;Setting model session\&quot;)\n            # await self.set_conversation(conversation_id, prompt)\n            logger.info(\&quot;Sending message to AIChat\&quot;)\n \n            if file is None or len(file) == 0:\n                picture_bytes = None\n                user_query = sql_models.Message(\n                    role=\&quot;user\&quot;, content=prompt, conversation_id=self.conversation_id\n                )\n            else:\n                picture_bytes = base64.b64decode(file)\n \n                mime_type = get_mime_type(file_type)\n \n                # Wrap the bytes in the expected object\n                image = ImageData(data=picture_bytes, mime_type=mime_type)\n                user_query = sql_models.Message(\n                    # The above code snippet in Python is creating a dictionary with the following\n                    # key-value pairs:\n                    # - \&quot;role\&quot;: \&quot;user\&quot;\n                    # - \&quot;content\&quot;: the value stored in the variable `prompt`\n                    # - \&quot;conversation_id\&quot;: the value stored in `self.conversation_id`\n                    # - \&quot;has_image\&quot;: True\n                    role=\&quot;user\&quot;,\n                    content=prompt,\n                    conversation_id=self.conversation_id,\n                    attachment_type=file_type,\n                )\n            await self.dbs.add_record(user_query)\n \n            p_content = Part.from_text(prompt)\n            f_content = Part.from_image(image) if picture_bytes is not None else None\n            res_prompt = Content(\n                role=\&quot;user\&quot;, parts=[p_content, f_content] if f_content else [p_content]\n            )\n \n            start_time = datetime.now()\n            response = self.chat_session.send_message(res_prompt)\n            end_time = datetime.now()\n \n            logger.info(\&quot;Time difference:%s\&quot;, (end_time - start_time))\n            logger.info(\&quot;Received response from AIChat - length %i\&quot;, len(response.text))\n \n            genai_response = sql_models.Message(\n                role=\&quot;assistant\&quot;,\n                content=response.text,\n                conversation_id=self.conversation_id,\n            )\n            await self.dbs.add_record(genai_response)\n            # Update the updated_at field for the conversation\n            await self.dbs.update_record(\n                sql_models.Conversation, conversation_id, {\&quot;updated_at\&quot;: datetime.now()}\n            )\n \n            logger.info(\&quot;Message sent to AIChat and response received\&quot;)\n            return response.text, self.conversation_id\n \n        except ResponseValidationError as exc:\n            logger.error(\&quot;Error sending message to AIChat: %s\&quot;, exc)\n            genai_err_response = sql_models.Message(\n                role=\&quot;assistant\&quot;,\n                content=\&quot;Sorry, I can't process your request right now. Please try again later. \\n If the problem persists, contact the system administrator.\&quot;,\n                conversation_id=self.conversation_id,\n            )\n            await self.dbs.add_record(genai_err_response)\n            return (\n                \&quot;Sorry, I can't process your request right now. Please try again later.\&quot;\n                \&quot;If the problem persists, contact the system administrator.\&quot;\n            ), 0&quot;,&quot;paramValue&quot;:&quot;&quot;}]},{&quot;promptName&quot;:&quot;react_typed_feature_rich_chat_input_component&quot;,&quot;commandName&quot;:&quot;react_typed_feature_rich_chat_input_component_develop&quot;,&quot;shortDescription&quot;:&quot;The ChatInput component offers a versatile interface for chat apps, enabling text input, file attachments, and customizable features. It supports theming, localization, and state management for an enhanced user experience.&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;python_imagen_api&quot;,&quot;commandName&quot;:&quot;python_imagen_api_develop&quot;,&quot;shortDescription&quot;:&quot;It is used to create generate_images api for backend&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;XE&quot;,&quot;templateParams&quot;:[]},{&quot;promptName&quot;:&quot;crud_microservice_prompt&quot;,&quot;commandName&quot;:&quot;crud_microservice_prompt&quot;,&quot;shortDescription&quot;:&quot;The prompt to implement crud micro service\n&quot;,&quot;account_name&quot;:&quot;PublicisSapient&quot;,&quot;project_name&quot;:&quot;General-Backend&quot;,&quot;templateParams&quot;:[{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;language&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;entity_name&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;database&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;Entity&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;entity_plural&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;id&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;id_type&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;},{&quot;hintText&quot;:&quot;test&quot;,&quot;paramName&quot;:&quot;fields&quot;,&quot;paramShortDesc&quot;:&quot;test&quot;,&quot;paramValue&quot;:&quot;&quot;}]}],&quot;timeStamp&quot;:[2025,6,25,12,6,44,775037100]}" />
  </component>
</project>